plot_ooo_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0')
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
plot_ooo_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0')
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0') %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df
plot_ooo_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0') %>%
count(chosenThreatStatus)
plot_ooo_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0') %>%
count(chosenThreatStatus)
plot_ooo_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0') %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(plot_ooo_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df
plot_ooo_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0') %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df
plot_ooo_df <- mistake_df %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df
ggplot(data = plot_ooo_df, mapping = aes(x = chosenThreatStatus, y = percentage_chosenThreatStatus)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Chosen Threat Status", y = "Percentage") +
scale_x_discrete(labels = c("neutral", "threat"))
subject_mistake_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0')
plot_ooo_df <- subject_mistake_df %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(subject_mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df
ggplot(data = plot_ooo_df, mapping = aes(x = chosenThreatStatus, y = percentage_chosenThreatStatus)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Chosen Threat Status", y = "Percentage") +
scale_x_discrete(labels = c("neutral", "threat"))
View(ooo_df)
ooo_df <- ooo_df %>%
group_by(subject, chosenThreatStatus) %>%
summarize(mean_acc = mean(acc))
ooo_df <- ooo_df %>%
group_by(subject, chosenThreatStatus) %>%
summarize(mean_acc = mean(acc))
ooo_df <- ooo_df %>%
group_by(subject) %>%
summarize(mean_acc = mean(acc))
View(ooo_df)
#path references
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv' #EDIT PATH NAME EACH TIME
#load data
ooo_df <- read_csv(data_path)
View(ooo_df)
View(ooo_df)
#load data
df <- read_csv(data_path)
ooo_df <- df %>%
filter(taskName == 'oddOneOutTest')
View(ooo_df)
#path references
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv' #EDIT PATH NAME EACH TIME
#load data
df <- read_csv(data_path)
ooo_df <- df %>%
filter(taskName == 'oddOneOutTest')
mistake_df <- ooo_df %>%
filter(acc == 0) %>%
mutate(otherNode = case_when(partResp == 1 ~ ifelse(option2CommunityNumber == chosenCommunityNumber, 2, 3),
partResp == 2 ~ ifelse(option1CommunityNumber == chosenCommunityNumber, 1, 3),
partResp == 3 ~ ifelse(option1CommunityNumber == chosenCommunityNumber, 1, 2))) %>%
mutate(otherNodeThreatStatus = case_when(otherNode == 1 ~ option1ThreatStatus,
otherNode == 2 ~ option2ThreatStatus,
otherNode == 3 ~ option3ThreatStatus)) %>%
select(subject, trialCount, acc, RT, partResp, chosenThreatStatus, otherNode, otherNodeThreatStatus) %>%
filter(chosenThreatStatus != otherNodeThreatStatus)
View(mistake_df)
ooo_df <- ooo_df %>%
group_by(subject) %>%
summarize(mean_acc = mean(acc))
ooo_df
ooo_df <- ooo_df %>%
group_by(subject, chosenThreatStatus) %>%
summarize(mean_acc = mean(acc))
View(ooo_df)
library(tidyverse)
library(ggplot2)
#path references
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv' #EDIT PATH NAME EACH TIME
#load data
df <- read_csv(data_path)
ooo_df <- df %>%
filter(taskName == 'oddOneOutTest')
mistake_df <- ooo_df %>%
filter(acc == 0) %>%
mutate(otherNode = case_when(partResp == 1 ~ ifelse(option2CommunityNumber == chosenCommunityNumber, 2, 3),
partResp == 2 ~ ifelse(option1CommunityNumber == chosenCommunityNumber, 1, 3),
partResp == 3 ~ ifelse(option1CommunityNumber == chosenCommunityNumber, 1, 2))) %>%
mutate(otherNodeThreatStatus = case_when(otherNode == 1 ~ option1ThreatStatus,
otherNode == 2 ~ option2ThreatStatus,
otherNode == 3 ~ option3ThreatStatus)) %>%
select(subject, trialCount, acc, RT, partResp, chosenThreatStatus, otherNode, otherNodeThreatStatus) %>%
filter(chosenThreatStatus != otherNodeThreatStatus)
ooo_df <- ooo_df %>%
group_by(subject, chosenThreatStatus) %>%
summarize(mean_acc = mean(acc))
ooo_df
ggplot(ooo_df, aes(x = chosenThreatStatus, y = mean_accuracy, group = subject)) +
geom_line(aes(color = as.factor(subject)), size = 1.2) +
geom_point(aes(color = as.factor(subject)), size = 3) +
scale_color_discrete(name = "Subject") +
labs(x = "Chosen Threat Status", y = "Mean Accuracy") +
theme_classic()
ggplot(ooo_df, aes(x = chosenThreatStatus, y = mean_acc, group = subject)) +
geom_line(aes(color = as.factor(subject)), size = 1.2) +
geom_point(aes(color = as.factor(subject)), size = 3) +
scale_color_discrete(name = "Subject") +
labs(x = "Chosen Threat Status", y = "Mean Accuracy") +
theme_classic()
ggplot(df, aes(x = chosenThreatStatus, y = mean_accuracy, fill = subject)) +
geom_boxplot() +
labs(x = "Chosen Threat Status", y = "Mean Accuracy") +
theme_classic()
ggplot(df, aes(x = chosenThreatStatus, y = mean_acc, fill = subject)) +
geom_boxplot() +
labs(x = "Chosen Threat Status", y = "Mean Accuracy") +
theme_classic()
ggplot(ooo_df, aes(x = chosenThreatStatus, y = mean_acc, fill = subject)) +
geom_boxplot() +
labs(x = "Chosen Threat Status", y = "Mean Accuracy") +
theme_classic()
ggplot(df, aes(x = chosenThreatStatus, y = mean_accuracy, fill = subject)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Chosen Threat Status", y = "Mean Accuracy", fill = "Subject")
ggplot(ooo_df, aes(x = chosenThreatStatus, y = mean_acc, fill = subject)) +
geom_bar(stat = "identity", position = "dodge") +
labs(x = "Chosen Threat Status", y = "Mean Accuracy", fill = "Subject")
subject_mistake_df <- mistake_df %>%
filter(subject == 'a273wocs111dh0')
plot_ooo_df_subjects <- subject_mistake_df %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(subject_mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df_subjects
ggplot(data = plot_ooo_df, mapping = aes(x = chosenThreatStatus, y = percentage_chosenThreatStatus)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Chosen Threat Status", y = "Percentage") +
scale_x_discrete(labels = c("neutral", "threat"))
plot_ooo_df <- mistake_df %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
plot_ooo_df
ggplot(data = plot_ooo_df, mapping = aes(x = chosenThreatStatus, y = percentage_chosenThreatStatus)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Chosen Threat Status", y = "Percentage") +
scale_x_discrete(labels = c("neutral", "threat"))
ggplot(data = plot_ooo_df_subjects, mapping = aes(x = chosenThreatStatus, y = percentage_chosenThreatStatus)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Chosen Threat Status", y = "Percentage") +
scale_x_discrete(labels = c("neutral", "threat"))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
#high anxiety data frame, ooo
high_anxiety_ooo_df <- STAI_subject_acc_ooo_df %>%
filter(anxiety_level == 'high')
STAI_subject_acc_ooo_df <- STAI_subject_acc_ooo_df %>%
group_by(subject, chosenThreatStatus, anxiety_level) %>%
summarize(mean_acc = mean(acc))
STAI_subject_acc_ooo_df <- merge(ooo_df, df_pilot1_STAI_simple, by = "subject", all = TRUE)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
#CREATE LISTS OF THE THREAT AND NEUTRAL SLOTS FOR EACH SUBJECT
# initialize an empty list for each subject for which of the slots are threat slots and which are neutral slots
threat_slots_list <- list()
neutral_slots_list <- list()
for (subject in unique(check_answer_df$subject)) {
slots_with_threat <- c()
slots_with_neutral <- c()
#look through correct type column for each slot
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
CorrectType <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
#if value is threat, add to threat vector
if (CorrectType == 'threat') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_threat <- c(slots_with_threat, slot_name)
#if value is neutral, add to neutral vector
} else if (CorrectType == 'neutral') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_neutral <- c(slots_with_neutral, slot_name)
}
}
threat_slots_list[[subject]] <- slots_with_threat
neutral_slots_list[[subject]] <- slots_with_neutral
}
threat_slots_list
neutral_slots_list
#MANIPULATE THE DATA FRAME SO IT IS IN THE DESIRED FORMAT
# Calculate the percentage of accuracy, for one slot
#accuracy_df <- check_answer_df %>%
#group_by(subject, trialCount) %>%
#summarize(accuracy = sum(slot0Acc == 1) / max(trialAttempt) * 100)
#accuracy_df
#find the accuracy values for each slot for each trial for each subject
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot8Acc, slot9Acc)
check_answer_df_2
#make a list of separate data frames in a list for each subject
#unique subjects
unique_subjects <- unique(check_answer_df_2$subject)
check_answer_df_list <- list()
#iterate through each subject and make a data frame just for that subject, then append it to the final list
for (subject in unique_subjects) {
check_answer_df_subject <- check_answer_df_2[check_answer_df_2$subject == subject, ]
check_answer_df_list[[subject]] <- check_answer_df_subject
}
check_answer_df_list
#following code commented out, but to view a data frame within the list (in this case, the first data frame), for testing purposes
#options(max.print = Inf)
#View(check_answer_df_list[[2]])
#CHANGE THE NAMES OF THE COLUMNS TO THREAT OR NEUTRAL CORRESPONDING TO LISTS OF THREAT AND NEUTRAL SLOTS FOR EACH SUBJECT GENERATED EARLIER
#iterate through each subject's check answer data frame
for (subject in unique_subjects) {
check_answer_df_subject <- check_answer_df_2[check_answer_df_2$subject == subject, ]
#access the corresponding threat and neutral slots for each subject
threat_slots <- threat_slots_list[[subject]]
neutral_slots <- neutral_slots_list[[subject]]
#iterate through the columns 4-13 of the check answer data frame and replace the column names with threat or neutral corresponding to the threat and neutral slots for that subject
for (i in 4:13) {
col_name <- names(check_answer_df_subject)[i]
#check if that column (that slot) is a threat slot
if (any(grepl(paste0("slot", i - 4), threat_slots))) {
#replace the column name with 'threat' if so
names(check_answer_df_subject)[i] <- "threat"
}
#check if that column (that slot) is a neutral slot
else if (any(grepl(paste0("slot", i - 4), neutral_slots))) {
# replace the column name with 'neutral' if so
names(check_answer_df_subject)[i] <- "neutral"
}
}
#add the data frame that results from each subject to a list of the data frames for all subjects, making check_answer_df_list have the correct column names
check_answer_df_list[[subject]] <- check_answer_df_subject
}
check_answer_df_list
#CREATE NEW DATA FRAME SHOWING, FOR EACH SUBJECT, WHICH WAS FIRST TO BE ALL CORRECT (THREAT OR NEUTRAL)?
# Initialize an empty list for the resulting data frames
first_correct_df_list <- list()
#iterate through each subject
for (subject in unique_subjects) {
check_answer_df_subject <- check_answer_df_list[[subject]]
# Initialize an empty data frame for the current subject
first_correct_df_subject <- data.frame(trial = integer(),
which_was_first = character(),
stringsAsFactors = FALSE)
# Iterate through each trial
for (trial in unique(check_answer_df_subject$trialCount)) {
check_answer_trial_df <- check_answer_df_subject[check_answer_df_subject$trialCount == trial, ]
row_threat <- which(rowSums(check_answer_trial_df[, grepl("threat", names(check_answer_trial_df))]) == sum(grepl("threat", names(check_answer_trial_df))))[1]
row_neutral <- which(rowSums(check_answer_trial_df[, grepl("neutral", names(check_answer_trial_df))]) == sum(grepl("neutral", names(check_answer_trial_df))))[1]
# Determine the value of 'which was first' based on the conditions
if (row_threat < row_neutral) {
which_was_first <- "threat"
} else if (row_threat > row_neutral) {
which_was_first <- "neutral"
} else {
which_was_first <- "equal"
}
# Add the current trial information to the subject's data frame
first_correct_df_subject <- rbind(first_correct_df_subject, data.frame(trial = trial, which_was_first = which_was_first))
}
# Add the subject's data frame to the list of resulting data frames
first_correct_df_list[[subject]] <- first_correct_df_subject
}
first_correct_df_list
setwd("~/Documents/GitHub/anxiety_cognitive_maps_analyses")
library(tidyverse)
df <- read_csv('data/combinedData_Anxiety_Cognitive_Maps.csv')
#analyze drop events
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, RT, nCorrect, dragThreat, dragAcc, swappedThreat, swappedAcc)
write_csv(drop_df, 'data/dropEvent.csv')
drop_df
#analyze check answer events
check_answer_df <- df %>%
filter(sectionType == 'dragTaskCheckAnswerEvent') %>%
select(subject, trialCount, trialAttempt, RT, nCorrect, slot0Acc, slot0CurrentType, slot0CorrectType, slot0CurrentSRC, slot0CorrectSRC, slot1Acc,
slot1CurrentType, slot1CorrectType,slot1CurrentSRC, slot1CorrectSRC,
slot2Acc, slot2CurrentType, slot2CorrectType, slot2CurrentSRC, slot2CorrectSRC,
slot3Acc, slot3CurrentType, slot3CorrectType, slot3CurrentSRC, slot3CorrectSRC,
slot4Acc, slot4CurrentType, slot4CorrectType, slot4CurrentSRC, slot4CorrectSRC,
slot5Acc, slot5CurrentType, slot5CorrectType, slot5CurrentSRC, slot5CorrectSRC,
slot6Acc, slot6CurrentType, slot6CorrectType, slot6CurrentSRC, slot6CorrectSRC,
slot7Acc, slot7CurrentType, slot7CorrectType, slot7CurrentSRC, slot7CorrectSRC,
slot8Acc, slot8CurrentType, slot8CorrectType, slot8CurrentSRC, slot8CorrectSRC,
slot9Acc, slot9CurrentType, slot9CorrectType, slot9CurrentSRC, slot9CorrectSRC)
write_csv(check_answer_df, 'data/checkAnswer.csv')
check_answer_df
#analyze illegal transition data
illegal_transition_df <- df %>%
filter(sectionType == 'mainTask' & taskName == 'illegalTransitionTask') %>%
select(subject, trialCount, blockTrialCount, block, RT, acc, activeNodeCommunityCongruency:transitionThreatKind)
write_csv(illegal_transition_df, 'data/illegalTransition.csv')
#analyze odd one out data
ooo_df <- df %>%
filter(sectionType == 'mainTask' & taskName == 'oddOneOutTest') %>%
select(subject, trialCount, RT, acc, partResp, chosenNode:chosenThreatStatus,
option1CommunityNumber, option1ThreatStatus,
option2CommunityNumber, option2ThreatStatus,
option3CommunityNumber, option3ThreatStatus)
write_csv(ooo_df, 'data/oddOneOut.csv')
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
#CREATE LISTS OF THE THREAT AND NEUTRAL SLOTS FOR EACH SUBJECT
# initialize an empty list for each subject for which of the slots are threat slots and which are neutral slots
threat_slots_list <- list()
neutral_slots_list <- list()
for (subject in unique(check_answer_df$subject)) {
slots_with_threat <- c()
slots_with_neutral <- c()
#look through correct type column for each slot
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
CorrectType <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
#if value is threat, add to threat vector
if (CorrectType == 'threat') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_threat <- c(slots_with_threat, slot_name)
#if value is neutral, add to neutral vector
} else if (CorrectType == 'neutral') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_neutral <- c(slots_with_neutral, slot_name)
}
}
threat_slots_list[[subject]] <- slots_with_threat
neutral_slots_list[[subject]] <- slots_with_neutral
}
threat_slots_list
neutral_slots_list
#MANIPULATE THE DATA FRAME SO IT IS IN THE DESIRED FORMAT
# Calculate the percentage of accuracy, for one slot
#accuracy_df <- check_answer_df %>%
#group_by(subject, trialCount) %>%
#summarize(accuracy = sum(slot0Acc == 1) / max(trialAttempt) * 100)
#accuracy_df
#find the accuracy values for each slot for each trial for each subject
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot8Acc, slot9Acc)
check_answer_df_2
#make a list of separate data frames in a list for each subject
#unique subjects
unique_subjects <- unique(check_answer_df_2$subject)
check_answer_df_list <- list()
#iterate through each subject and make a data frame just for that subject, then append it to the final list
for (subject in unique_subjects) {
check_answer_df_subject <- check_answer_df_2[check_answer_df_2$subject == subject, ]
check_answer_df_list[[subject]] <- check_answer_df_subject
}
check_answer_df_list
#following code commented out, but to view a data frame within the list (in this case, the first data frame), for testing purposes
#options(max.print = Inf)
#View(check_answer_df_list[[2]])
#CHANGE THE NAMES OF THE COLUMNS TO THREAT OR NEUTRAL CORRESPONDING TO LISTS OF THREAT AND NEUTRAL SLOTS FOR EACH SUBJECT GENERATED EARLIER
#iterate through each subject's check answer data frame
for (subject in unique_subjects) {
check_answer_df_subject <- check_answer_df_2[check_answer_df_2$subject == subject, ]
#access the corresponding threat and neutral slots for each subject
threat_slots <- threat_slots_list[[subject]]
neutral_slots <- neutral_slots_list[[subject]]
#iterate through the columns 4-13 of the check answer data frame and replace the column names with threat or neutral corresponding to the threat and neutral slots for that subject
for (i in 4:13) {
col_name <- names(check_answer_df_subject)[i]
#check if that column (that slot) is a threat slot
if (any(grepl(paste0("slot", i - 4), threat_slots))) {
#replace the column name with 'threat' if so
names(check_answer_df_subject)[i] <- "threat"
}
#check if that column (that slot) is a neutral slot
else if (any(grepl(paste0("slot", i - 4), neutral_slots))) {
# replace the column name with 'neutral' if so
names(check_answer_df_subject)[i] <- "neutral"
}
}
#add the data frame that results from each subject to a list of the data frames for all subjects, making check_answer_df_list have the correct column names
check_answer_df_list[[subject]] <- check_answer_df_subject
}
check_answer_df_list
#CREATE NEW DATA FRAME SHOWING, FOR EACH SUBJECT, WHICH WAS FIRST TO BE ALL CORRECT (THREAT OR NEUTRAL)?
# Initialize an empty list for the resulting data frames
first_correct_df_list <- list()
#iterate through each subject
for (subject in unique_subjects) {
check_answer_df_subject <- check_answer_df_list[[subject]]
# Initialize an empty data frame for the current subject
first_correct_df_subject <- data.frame(trial = integer(),
which_was_first = character(),
stringsAsFactors = FALSE)
# Iterate through each trial
for (trial in unique(check_answer_df_subject$trialCount)) {
check_answer_trial_df <- check_answer_df_subject[check_answer_df_subject$trialCount == trial, ]
row_threat <- which(rowSums(check_answer_trial_df[, grepl("threat", names(check_answer_trial_df))]) == sum(grepl("threat", names(check_answer_trial_df))))[1]
row_neutral <- which(rowSums(check_answer_trial_df[, grepl("neutral", names(check_answer_trial_df))]) == sum(grepl("neutral", names(check_answer_trial_df))))[1]
# Determine the value of 'which was first' based on the conditions
if (row_threat < row_neutral) {
which_was_first <- "threat"
} else if (row_threat > row_neutral) {
which_was_first <- "neutral"
} else {
which_was_first <- "equal"
}
# Add the current trial information to the subject's data frame
first_correct_df_subject <- rbind(first_correct_df_subject, data.frame(trial = trial, which_was_first = which_was_first))
}
# Add the subject's data frame to the list of resulting data frames
first_correct_df_list[[subject]] <- first_correct_df_subject
}
first_correct_df_list
# Initialize an empty vector to store the results
num_threat <- numeric()
# Iterate through each subject
for (subject in unique_subjects) {
first_correct_df_subject <- first_correct_df_list[[subject]]
# Count the number of times 'threat' is the value for 'which_was_first'
num_threat_subject <- sum(first_correct_df_subject$which_was_first == 'threat')
# Append the result to the vector
num_threat <- c(num_threat, num_threat_subject)
}
# Create a data frame with subject and number of 'threat' occurrences
threat_count_df <- data.frame(subject = unique_subjects, num_threat = num_threat)
# Print the resulting data frame
print(threat_count_df)
# Initialize an empty vector to store the results
num_threat <- numeric()
num_neutral <- numeric()
num_equal <- numeric()
# Iterate through each subject
for (subject in unique_subjects) {
first_correct_df_subject <- first_correct_df_list[[subject]]
# Count the number of times 'threat' is the value for 'which_was_first'
num_threat_subject <- sum(first_correct_df_subject$which_was_first == 'threat')
num_neutral_subject <- sum(first_correct_df_subject$which_was_first == 'neutral')
num_equal_subject <- sum(first_correct_df_subject$which_was_first == 'equal')
# Append the result to the vector
num_threat <- c(num_threat, num_threat_subject)
num_neutral <- c(num_neutral, num_neutral_subject)
num_equal <- c(num_equal, num_equal_subject)
}
# Create a data frame with subject and number of 'threat' occurrences
new_count_df <- data.frame(subject = unique_subjects, num_threat = num_threat, num_neutral = num_neutral, num_equal = num_equal)
# Print the resulting data frame
print(new_count_df)
# Iterate through each subject
for (subject in unique_subjects) {
first_correct_df_subject <- first_correct_df_list[[subject]]
num_rows_subject <- nrow(first_correct_df_subject)
num_rows_subject
#CALCULATE PERCENTAGE OF THREAT FIRST ALL CORRECT VS. NEUTRAL FIRST ALL CORRECT FOR EACH SUBJECT
# Initialize an empty vector to store the results
percent_threat <- numeric()
percent_neutral <- numeric()
percent_equal <- numeric()
# Iterate through each subject
for (subject in unique_subjects) {
first_correct_df_subject <- first_correct_df_list[[subject]]
num_rows_subject <- nrow(first_correct_df_subject)
# Count the number of times 'threat' is the value for 'which_was_first'
num_threat_subject <- sum(first_correct_df_subject$which_was_first == 'threat')
percent_threat_subject <- ((num_threat_subject/num_rows_subject) * 100)
num_neutral_subject <- sum(first_correct_df_subject$which_was_first == 'neutral')
percent_neutral_subject <- ((num_neutral_subject/num_rows_subject) * 100)
num_equal_subject <- sum(first_correct_df_subject$which_was_first == 'equal')
percent_equal_subject <- ((num_equal_subject/num_rows_subject) * 100)
# Append the result to the vector
percent_threat <- c(percent_threat, percent_threat_subject)
percent_neutral <- c(percent_neutral, percent_neutral_subject)
percent_equal <- c(percent_equal, percent_equal_subject)
}
# Create a data frame with subject and number of 'threat' occurrences
new_count_df <- data.frame(subject = unique_subjects, percent_threat = percent_threat, percent_neutral = percent_neutral, percent_equal = percent_equal)
# Print the resulting data frame
print(new_count_df)
