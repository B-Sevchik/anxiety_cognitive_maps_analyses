View(check_answer_df_1)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
clipr::write_clip(check_answer_df_1)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
clipr::write_clip(check_answer_df_1)
# Extract the relevant columns for slot and CorrectType
slot_columns <- grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)
# Create an empty data frame to store the results
result <- data.frame(subject = character(),
slot = integer(),
CorrectType = character(),
stringsAsFactors = FALSE)
# Iterate over each subject
for (subject in unique(check_answer_df$subject)) {
# Iterate over each slot
for (slot_col in slot_columns) {
# Get the slot number
slot_num <- as.numeric(sub("slot", "", sub("CorrectType", "", slot_col)))
# Get the CorrectType value
CorrectType <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
# Append the result to the data frame
result <- rbind(result, data.frame(subject = subject,
slot = slot_num,
CorrectType = CorrectType,
stringsAsFactors = FALSE))
}
}
# Print the result
print(result)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
clipr::write_clip(check_answer_df_1)
# Initialize an empty list to store the results
result <- list()
# Iterate over each subject
for (subject in unique(check_answer_df$subject)) {
# Initialize an empty vector to store the slot CorrectTypes for 'threat'
slots_with_threat <- c()
# Iterate over each slot CorrectType column
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
# Get the slot CorrectType value
CorrectType <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
# Check if the value is 'threat'
if (CorrectType == 'threat') {
# Extract the slot number from the column name
slot_num <- as.numeric(sub("slot", "", sub("CorrectType", "", slot_col)))
# Append the slot number to the vector
slots_with_threat <- c(slots_with_threat, slot_num)
}
}
# Store the result for the subject in the list
result[[subject]] <- slots_with_threat
}
# Print the result
print(result)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
clipr::write_clip(check_answer_df_1)
# Initialize an empty list to store the results
correct_threat_slots_list <- list()
# Iterate over each subject
for (subject in unique(check_answer_df$subject)) {
# Initialize an empty vector to store the slot CorrectTypes for 'threat'
slots_with_threat <- c()
# Iterate over each slot CorrectType column
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
# Get the slot CorrectType value
CorrectType <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
# Check if the value is 'threat'
if (CorrectType == 'threat') {
# Extract the slot number from the column name
slot_num <- as.numeric(sub("slot", "", sub("CorrectType", "", slot_col)))
# Append the slot number to the vector
slots_with_threat <- c(slots_with_threat, slot_num)
}
}
# Store the result for the subject in the list
correct_threat_slots_list[[subject]] <- slots_with_threat
}
# Print the result
print(result)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
clipr::write_clip(check_answer_df_1)
#create a list for each subject, of which of the correct slots are threat slots
correct_threat_slots_list <- list()
for (subject in unique(check_answer_df$subject)) {
slots_with_threat <- c()
#look through correct type column for each slot
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
correct_type <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
if (correct_type == 'threat') {
# Extract the slot number from the column name
slot_num <- as.numeric(sub("slot", "", sub("CorrectType", "", slot_col)))
# Append the slot number to the vector
slots_with_threat <- c(slots_with_threat, slot_num)
}
}
# Store the result for the subject in the list
correct_threat_slots_list[[subject]] <- slots_with_threat
}
# Print the result
print(correct_threat_slots_list)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
clipr::write_clip(check_answer_df_1)
#create a list for each subject, of which of the correct slots are threat slots
correct_threat_slots_list <- list()
for (subject in unique(check_answer_df$subject)) {
slots_with_threat <- c()
#look through correct type column for each slot
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
correct_type <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
if (correct_type == 'threat') {
# Extract the slot number from the column name
slot_name <- sub("CorrectType", "", slot_col)
# Append the slot number to the vector
slots_with_threat <- c(slots_with_threat, slot_name)
}
}
# Store the result for the subject in the list
correct_threat_slots_list[[subject]] <- slots_with_threat
}
# Print the result
print(correct_threat_slots_list)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
clipr::write_clip(check_answer_df_1)
#create a list for each subject, of which of the correct slots are threat slots
correct_threat_slots_list <- list()
for (subject in unique(check_answer_df$subject)) {
slots_with_threat <- c()
#look through correct type column for each slot
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
correct_type <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
if (correct_type == 'threat') {
#get the slot that is a threat slot, and append it
slot_name <- sub("CorrectType", "", slot_col)
slots_with_threat <- c(slots_with_threat, slot_name)
}
}
correct_threat_slots_list[[subject]] <- slots_with_threat
}
correct_threat_slots_list
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
# initialize an empty list for each subject for which of the slots are threat slots and which are neutral slots
threat_slots_list <- list()
neutral_slots_list <- list()
for (subject in unique(check_answer_df$subject)) {
slots_with_threat <- c()
slots_with_neutral <- c()
#look through correct type column for each slot
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
CorrectType <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
#if value is threat, add to threat vector
if (CorrectType == 'threat') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_threat <- c(slots_with_threat, slot_name)
#if value is neutral, add to neutral vector
} else if (CorrectType == 'neutral') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_neutral <- c(slots_with_neutral, slot_name)
}
}
threat_slots_list[[subject]] <- slots_with_threat
neutral_slots_list[[subject]] <- slots_with_neutral
}
threat_slots_list
neutral_slots_list
# Create the table data frame
table_data <- data.frame(
task = rep("check answer", length(result_threat)),
trial = rep(1:max_slots, length(result_threat)),
attempt = rep(1:length(result_threat[[1]]), max_slots),
threat_1 = unlist(lapply(result_threat, "[[", 1)),
threat_2 = unlist(lapply(result_threat, "[[", 2)),
threat_3 = unlist(lapply(result_threat, "[[", 3)),
threat_4 = unlist(lapply(result_threat, "[[", 4)),
neutral_1 = unlist(lapply(result_neutral, "[[", 1)),
neutral_2 = unlist(lapply(result_neutral, "[[", 2)),
neutral_3 = unlist(lapply(result_neutral, "[[", 3)),
neutral_4 = unlist(lapply(result_neutral, "[[", 4)),
neutral_5 = unlist(lapply(result_neutral, "[[", 5)),
neutral_6 = unlist(lapply(result_neutral, "[[", 6))
)
# Print the table
print(table_data)
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
#CREATE LISTS OF THE THREAT AND NEUTRAL SLOTS FOR EACH SUBJECT
# initialize an empty list for each subject for which of the slots are threat slots and which are neutral slots
threat_slots_list <- list()
neutral_slots_list <- list()
for (subject in unique(check_answer_df$subject)) {
slots_with_threat <- c()
slots_with_neutral <- c()
#look through correct type column for each slot
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
CorrectType <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
#if value is threat, add to threat vector
if (CorrectType == 'threat') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_threat <- c(slots_with_threat, slot_name)
#if value is neutral, add to neutral vector
} else if (CorrectType == 'neutral') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_neutral <- c(slots_with_neutral, slot_name)
}
}
threat_slots_list[[subject]] <- slots_with_threat
neutral_slots_list[[subject]] <- slots_with_neutral
}
threat_slots_list
neutral_slots_list
#TRY TO CREATE LIST YOU WANT
# Create the table data frame
table_data <- data.frame(
task = rep("check answer", length(result_threat)),
trial = rep(1:max_slots, length(result_threat)),
attempt = rep(1:length(result_threat[[1]]), max_slots),
threat_1 = unlist(lapply(result_threat, "[[", 1)),
threat_2 = unlist(lapply(result_threat, "[[", 2)),
threat_3 = unlist(lapply(result_threat, "[[", 3)),
threat_4 = unlist(lapply(result_threat, "[[", 4)),
neutral_1 = unlist(lapply(result_neutral, "[[", 1)),
neutral_2 = unlist(lapply(result_neutral, "[[", 2)),
neutral_3 = unlist(lapply(result_neutral, "[[", 3)),
neutral_4 = unlist(lapply(result_neutral, "[[", 4)),
neutral_5 = unlist(lapply(result_neutral, "[[", 5)),
neutral_6 = unlist(lapply(result_neutral, "[[", 6))
)
# Print the table
print(table_data)
# Create the table data frame
table_data <- data.frame(
task = rep("check answer", length(threat_slots_list)),
trial = rep(1:max_slots, length(threat_slots_list)),
attempt = rep(1:length(threat_slots_list[[1]]), max_slots),
threat_1 = unlist(lapply(threat_slots_list, "[[", 1)),
threat_2 = unlist(lapply(threat_slots_list, "[[", 2)),
threat_3 = unlist(lapply(threat_slots_list, "[[", 3)),
threat_4 = unlist(lapply(threat_slots_list, "[[", 4)),
neutral_1 = unlist(lapply(neutral_slots_list, "[[", 1)),
neutral_2 = unlist(lapply(neutral_slots_list, "[[", 2)),
neutral_3 = unlist(lapply(neutral_slots_list, "[[", 3)),
neutral_4 = unlist(lapply(neutral_slots_list, "[[", 4)),
neutral_5 = unlist(lapply(neutral_slots_list, "[[", 5)),
neutral_6 = unlist(lapply(neutral_slots_list, "[[", 6))
)
# Print the table
print(table_data)
#TRY TO CREATE LIST YOU WANT
max_slots <- max(lengths(threat_slots_list), lengths(neutral_slots_list))
table_data <- data.frame(
task = rep("check answer", length(threat_slots_list) * max_slots),
trial = rep(1:max_slots, length(threat_slots_list)),
attempt = rep(1:max(lengths(threat_slots_list)), max_slots * length(threat_slots_list)),
threat = unlist(lapply(threat_slots_list, function(x) c(x, rep(0, max_slots - length(x))))),
neutral = unlist(lapply(neutral_slots_list, function(x) c(x, rep(0, max_slots - length(x))))),
check.names = FALSE
)
# Print the table
print(table_data)
threat_slots_list
neutral_slots_list
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
writeClipboard(check_answer_df_1)
clipr::write_clip(check_answer_df_1)
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
clipr::write_clip(check_answer_df_1)
# Calculate the percentage of accuracy
accuracy_df <- your_data_frame %>%
group_by(subject, trialCount) %>%
summarize(accuracy = sum(slot0Acc == 1) / trialAttempt[1] * 100)
# Print the accuracy data frame
print(accuracy_df)
#TRY TO CREATE LIST YOU WANT
# Calculate the percentage of accuracy
accuracy_df <- check_answer_df %>%
group_by(subject, trialCount) %>%
summarize(accuracy = sum(slot0Acc == 1) / trialAttempt[1] * 100)
# Print the accuracy data frame
print(accuracy_df)
#TRY TO CREATE LIST YOU WANT
# Calculate the percentage of accuracy
accuracy_df <- your_data_frame %>%
group_by(subject, trialCount) %>%
summarize(accuracy = sum(slot0Acc == 1) / max(trialAttempt) * 100)
# Print the accuracy data frame
print(accuracy_df)
# Calculate the percentage of accuracy
accuracy_df <- check_answer_df %>%
group_by(subject, trialCount) %>%
summarize(accuracy = sum(slot0Acc == 1) / max(trialAttempt) * 100)
# Print the accuracy data frame
print(accuracy_df)
# Define the slot column names
slot_cols <- paste0("slot", 0:9, "Acc")
# Calculate the accuracy for each slot
accuracy_df <- your_data_frame %>%
group_by(subject, trialCount) %>%
summarize(across(all_of(slot_cols), ~ sum(.x == 1) / max(trialAttempt) * 100, .names = "accuracy_{.col}"))
# Print the accuracy data frame
print(accuracy_df)
# Define the slot column names
slot_cols <- paste0("slot", 0:9, "Acc")
# Create an empty data frame to store the accuracy results
accuracy_df <- data.frame(subject = character(),
trialCount = integer(),
trialAttempt = integer(),
stringsAsFactors = FALSE)
# Calculate accuracy for each slot and add as separate columns
for (slot_col in slot_cols) {
accuracy_col <- paste0(slot_col, "_accuracy")
temp_df <- check_answer_df %>%
group_by(subject, trialCount) %>%
summarize({{ accuracy_col }} := sum({{ slot_col }} == 1) / max(trialAttempt) * 100)
accuracy_df <- left_join(accuracy_df, temp_df, by = c("subject", "trialCount", "trialAttempt"))
}
# Print the accuracy data frame
print(accuracy_df)
###
# Define the slot column names
slot_cols <- paste0("slot", 0:9, "Acc")
# Create an empty data frame to store the accuracy results
accuracy_df <- data.frame(subject = character(),
trialCount = integer(),
trialAttempt = integer(),
stringsAsFactors = FALSE)
# Calculate accuracy for each slot and add as separate columns
for (slot_col in slot_cols) {
accuracy_col <- paste0(slot_col, "_accuracy")
temp_df <- your_data_frame %>%
group_by(subject, trialCount) %>%
mutate(trialAttempt = max(trialAttempt)) %>%
summarize({{ accuracy_col }} := sum({{ slot_col }} == 1) / trialAttempt * 100)
accuracy_df <- left_join(accuracy_df, temp_df, by = c("subject", "trialCount", "trialAttempt"))
}
# Print the accuracy data frame
print(accuracy_df)
# Define the slot column names
slot_cols <- paste0("slot", 0:9, "Acc")
# Create an empty data frame to store the accuracy results
accuracy_df <- data.frame(subject = character(),
trialCount = integer(),
trialAttempt = integer(),
stringsAsFactors = FALSE)
# Calculate accuracy for each slot and add as separate columns
for (slot_col in slot_cols) {
accuracy_col <- paste0(slot_col, "_accuracy")
temp_df <- check_answer_df %>%
group_by(subject, trialCount) %>%
mutate(trialAttempt = max(trialAttempt)) %>%
summarize({{ accuracy_col }} := sum({{ slot_col }} == 1) / trialAttempt * 100)
accuracy_df <- left_join(accuracy_df, temp_df, by = c("subject", "trialCount", "trialAttempt"))
}
# Print the accuracy data frame
print(accuracy_df)
# Define the slot column names
slot_cols <- paste0("slot", 0:9, "Acc")
# Create an empty data frame to store the accuracy results
accuracy_df <- data.frame(subject = character(),
trialCount = integer(),
trialAttempt = integer(),
stringsAsFactors = FALSE)
# Calculate accuracy for each slot and add as separate columns
for (slot_col in slot_cols) {
accuracy_col <- paste0(slot_col, "_accuracy")
temp_df <- check_answer_df %>%
group_by(subject, trialCount) %>%
mutate(trialAttempt = max(trialAttempt)) %>%
reframe({{ accuracy_col }} := sum({{ slot_col }} == 1) / trialAttempt * 100)
accuracy_df <- left_join(accuracy_df, temp_df, by = c("subject", "trialCount", "trialAttempt"))
}
# Print the accuracy data frame
print(accuracy_df)
#getting scores into numeric form so you can add them together later
print(sapply(df_pilot1, class)) #debugging
df_pilot1 <- transform(df_pilot1,s1 = as.numeric(s1))
print(sapply(df_pilot1$s1, class)) #debugging
df_pilot1 <- df_pilot1 %>%
mutate(across(paste0('s', 1:20), as.numeric))
#set-up
setwd("~/Documents/GitHub/anxiety_cognitive_maps_analyses")
library(tidyverse)
library(dplyr)
#BE SURE TO EDIT PATH NAMES EACH TIME YOU RUN SCRIPT
#path references
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/STAIscores.csv' #EDIT PATH NAME EACH TIME
#load data
df_pilot1 <- read_csv(data_path)
#manipulate df to get it to look how you want
colnames(df_pilot1) <- c('not_included', 'subjectID', paste0('s', 1:20))
num_rows = nrow(df_pilot1)
num_rows
df_pilot1 <- df_pilot1 %>%
slice(2:num_rows) %>%
select('subjectID', 's1', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 's10', 's11', 's12', 's13', 's14', 's15', 's16', 's17', 's18', 's19', 's20')
#getting scores into numeric form so you can add them together later
print(sapply(df_pilot1, class)) #debugging
df_pilot1 <- transform(df_pilot1,s1 = as.numeric(s1))
print(sapply(df_pilot1$s1, class)) #debugging
df_pilot1 <- df_pilot1 %>%
mutate(across(paste0('s', 1:20), as.numeric))
###
accuracy_df <- check_answer_df %>%
group_by(subject, trialCount) %>%
summarize(accuracy = sum(slot0Acc == 1)/ max(trialAttempt) * 100)
accuracy_df <- accuracy_df %>%
mutate(across(paste0('s', 1:20), as.numeric))
###
accuracy_df <- check_answer_df %>%
group_by(subject, trialCount) %>%
summarize(accuracy = sum(slot0Acc == 1)/ max(trialAttempt) * 100)
accuracy_df <- accuracy_df %>%
mutate(across(paste0('slot', 0:9), as.numeric))
###
accuracy_df <- check_answer_df %>%
group_by(subject, trialCount) %>%
summarize(accuracy = sum(slot0Acc == 1)/ max(trialAttempt) * 100)
accuracy_df <- accuracy_df %>%
mutate(across(paste0('slot', 0:9, 'Acc'), as.numeric))
check_answer_df_2 <- check_answer_df %>%
select(subject)
check_answer_df_2
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot9Acc)
check_answer_df_2
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot9Acc)
check_answer_df_2
accuracy_df <- check_answer_df_2 %>%
group_by(subject, trialCount) %>%
summarize(across(accuracy = sum('slot', 0:9, 'Acc' == 1)/ max(trialAttempt) * 100))
accuracy_df
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot8Acc, slot9Acc)
accuracy_df <- check_answer_df_2 %>%
group_by(subject, trialCount) %>%
summarize(across
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot8Acc, slot9Acc)
accuracy_df <- check_answer_df_2 %>%
group_by(subject, trialCount) %>%
summarize(across(starts_with('slot'), ~sum(. == 1) / max(trialAttempt) * 100, .names = "accuracy_{.col}"))
accuracy_df
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot8Acc, slot9Acc)
accuracy_df <- check_answer_df_2 %>%
group_by(subject, trialCount) %>%
summarize(across(starts_with('slot'), ~sum(. == 1) / max(trialAttempt) * 100, .names = "accuracy_slot{str_extract(.col, '\\\\d+')}"))
###
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot8Acc, slot9Acc)
accuracy_df <- check_answer_df_2 %>%
group_by(subject, trialCount) %>%
summarize(across(starts_with('slot'), ~sum(. == 1) / max(trialAttempt) * 100, .names = "accuracy_slot{str_extract(.col, '\\\\d+')}"))
accuracy_df
