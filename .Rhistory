moderate_trait_anxiety_df <- merged_data_frames$moderate_trait_anxiety
high_trait_anxiety_df <- merged_data_frames$high_trait_anxiety
#CALCULATE PERCENTAGE
#initialize empty list
check_answer_percent_first_list <- list()
#iterate through data frames in list
for (df_name in names(anxiety_first_row_STAI_list)) {
df <- anxiety_first_row_STAI_list[[df_name]]
#calculate number of subjects
num_subjects <- nrow(df)
#calculate percentages
num_threat_STAI <- sum(df$which_was_first == 'threat')
percent_threat_STAI <- (num_threat_STAI / num_subjects) * 100
num_neutral_STAI <- sum(df$which_was_first == 'neutral')
percent_neutral_STAI <- (num_neutral_STAI / num_subjects) * 100
num_equal_STAI <- sum(df$which_was_first == 'equal')
percent_equal_STAI <- (num_equal_STAI / num_subjects) * 100
#initialize data frame for current iteration
check_answer_percent_first_df <- data.frame(percent_neutral = percent_neutral_STAI,
percent_threat = percent_threat_STAI,
percent_equal = percent_equal_STAI)
#add data frame to the list
check_answer_percent_first_list[[df_name]] <- check_answer_percent_first_df
}
#access the resulting data frames from the list
check_answer_percent_first_df_low <- check_answer_percent_first_list$low_trait_anxiety
check_answer_percent_first_df_moderate <- check_answer_percent_first_list$moderate_trait_anxiety
check_answer_percent_first_df_high <- check_answer_percent_first_list$high_trait_anxiety
check_answer_percent_first_df_low
check_answer_percent_first_df_moderate
check_answer_percent_first_df_high
check_answer_percent_summary
df_pilot1_STAI_simple
#merge data frames
check_answer_percent_summary_STAI <- merge(df_pilot1_STAI_simple, check_answer_percent_summary, by = "subject")
check_answer_percent_summary_STAI
#high anxiety data frame, check answer 2 first plot
high_anxiety_check_answer_summary <- check_answer_percent_summary_STAI %>%
filter(anxiety_level == 'high trait anxiety')
high_anxiety_check_answer_summary
#moderate anxiety data frame, check answer 2 first plot
moderate_anxiety_check_answer_summary <- check_answer_percent_summary_STAI %>%
filter(anxiety_level == 'moderate trait anxiety')
moderate_anxiety_check_answer_summary
#low anxiety data frame, check answer 2 first plot
low_anxiety_check_answer_summary <- check_answer_percent_summary_STAI %>%
filter(anxiety_level == 'low trait anxiety')
low_anxiety_check_answer_summary
#high anxiety plot, check answer 2 plot1
ggplot(data = high_anxiety_check_answer_summary, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
labs(title = "Plot 1 Check Answer 2, High Anxiety", fill = "Threat Status", x = "Threat Status", y = "Percentage")
#moderate anxiety plot, check answer 2 plot1
ggplot(data = moderate_anxiety_check_answer_summary, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
labs(title = "Plot 1 Check Answer 2, Moderate Anxiety", fill = "Threat Status", x = "Threat Status", y = "Percentage")
#low anxiety plot, check answer 2 plot1
ggplot(data = low_anxiety_check_answer_summary, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
labs(title = "Plot1 Check Answer 2, Low Anxiety", fill = "Threat Status", x = "Threat Status", y = "Percentage")
check_answer_percent_first_df_trial1
#manipulate the data frame
check_answer_percent_first_df_trial1_plot <- check_answer_percent_first_df_trial1 %>%
pivot_longer(cols = c(percent_threat, percent_neutral, percent_equal),
names_to = "threat_status",
values_to = "percentage")
#rename threat status values such that they no longer are called percent_
check_answer_percent_first_df_trial1_plot$threat_status <- factor(check_answer_percent_first_df_trial1_plot$threat_status,
levels = c("percent_threat", "percent_neutral", "percent_equal"),
labels = c("threat", "neutral", "equal"))
#group by threat_status, summarize the percentage
check_answer_percent_summary_trial1 <- check_answer_percent_first_df_trial1_plot %>%
group_by(threat_status) %>%
summarize(percentage = mean(percentage))
check_answer_percent_summary_trial1
#this is the plot for JUST looking at the first trial. Across subjects, decide which
ggplot(data = check_answer_percent_summary_trial1, mapping = aes(x = threat_status, y = percentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Threat Status", y = "Percentage", title = "% of Subjects that got Threat or Neutral Images correct first on the first trial") +
scale_x_discrete(labels = c("threat", "neutral", "equal"))
#initialize empty list
check_answer_percent_summary_list <- list()
#iterate through data frames
for (df_name in c("check_answer_percent_first_df_low", "check_answer_percent_first_df_moderate", "check_answer_percent_first_df_high")) {
df <- get(df_name)
#manipulate data frame to get in desired format
df_plot <- df %>%
pivot_longer(cols = c(percent_threat, percent_neutral, percent_equal),
names_to = "threat_status",
values_to = "percentage")
#rename threat status values
df_plot$threat_status <- factor(df_plot$threat_status,
levels = c("percent_threat", "percent_neutral", "percent_equal"),
labels = c("threat", "neutral", "equal"))
#group by threat_status, get average percentage
df_summary <- df_plot %>%
group_by(threat_status) %>%
summarize(percentage = mean(percentage))
#add current data frame to the list
check_answer_percent_summary_list[[df_name]] <- df_summary
}
#how to access resulting data frames from the list
check_answer_percent_summary_low <- check_answer_percent_summary_list$check_answer_percent_first_df_low
check_answer_percent_summary_moderate <- check_answer_percent_summary_list$check_answer_percent_first_df_moderate
check_answer_percent_summary_high <- check_answer_percent_summary_list$check_answer_percent_first_df_high
check_answer_percent_summary_low
check_answer_percent_summary_moderate
check_answer_percent_summary_high
#these are the plots for JUST looking at the first trial
#low anxiety
ggplot(data = check_answer_percent_summary_low, mapping = aes(x = threat_status, y = percentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Threat Status", y = "Percentage", title = " % of Low Anxiety Subjects that got Threat or Neutral Images correct first on trial 1") +
scale_x_discrete(labels = c("threat", "neutral", "equal"))
#moderate anxiety
ggplot(data = check_answer_percent_summary_moderate, mapping = aes(x = threat_status, y = percentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Threat Status", y = "Percentage", title = "% of Moderate Anxiety subjects that got threat or neutral images correct first on trial 1") +
scale_x_discrete(labels = c("threat", "neutral", "equal"))
#high anxiety
ggplot(data = check_answer_percent_summary_high, mapping = aes(x = threat_status, y = percentage)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Threat Status", y = "Percentage", title = "% of High Anxiety subjects that got threat or neutral images correct first on trial 1") +
scale_x_discrete(labels = c("threat", "neutral", "equal"))
library(tidyverse)
library(dplyr)
#BASIC MANIPULATION
STAI_correlation_df <- read_csv('/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/all_participants/STAI_scores_calculated.csv')
# Create just the STAI score, subject, and anxiety level
STAI_correlation_df <- STAI_correlation_df %>%
select(subjectID, sumVals, anxiety_level)
STAI_correlation_df
# Change column name 'subjectID' to 'subject' for merging
colnames(STAI_correlation_df)[1] <- "subject"
STAI_correlation_df
#CHECK ANSWER
# Load df with check answer event stuff you need
check_answer_percent_summary
#merge the two dfs together to get the df you need for this linear correlation
check_answer_anxiety_correlation_df <- merge(check_answer_percent_summary, STAI_correlation_df, by = "subject", all = TRUE)
check_answer_anxiety_correlation_df
#create a df for each type of threat status (neutral, threat, and equal)
check_answer_anxiety_correlation_df_threat <- check_answer_anxiety_correlation_df %>%
filter(threat_status == 'threat')
check_answer_anxiety_correlation_df_threat
check_answer_anxiety_correlation_df_neutral <- check_answer_anxiety_correlation_df %>%
filter(threat_status == 'neutral')
check_answer_anxiety_correlation_df_neutral
check_answer_anxiety_correlation_df_equal <- check_answer_anxiety_correlation_df %>%
filter(threat_status == 'equal')
check_answer_anxiety_correlation_df_equal
#linear model stuff for correlation - mean_acc and sumVals
#threat
#initial model
linear_model_check_answer_threat <- lm(percentage ~ sumVals, data = check_answer_anxiety_correlation_df_threat)
summary(linear_model_check_answer_threat)
linear_model_check_answer_neutral <- lm(percentage ~ sumVals, data = check_answer_anxiety_correlation_df_neutral)
summary(linear_model_check_answer_neutral)
linear_model_check_answer_equal <- lm(percentage ~ sumVals, data = check_answer_anxiety_correlation_df_equal)
summary(linear_model_check_answer_equal)
#evaluating assumptions?????
#SCATTERPLOT THREAT
# Extract sumVals and percentage variables
x <- check_answer_anxiety_correlation_df_threat$sumVals
y <- check_answer_anxiety_correlation_df_threat$percentage
# Generate predicted values
predicted <- predict(linear_model_check_answer_threat)
# Create scatter plot with line of best fit
plot(x, y, main = "Threat Scatterplot", xlab = "sumVals", ylab = "percentage", pch = 16, col = "blue")
abline(linear_model_check_answer_threat, col = "red", lwd = 2)
#create same scatter plot using ggplot (matter of preference)
library(ggplot2)
ggplot(data = check_answer_anxiety_correlation_df_threat) +
geom_point(aes(x = sumVals, y = percentage), color = "blue", size = 3) +
geom_smooth(aes(x = sumVals, y = percentage), method = "lm", se = FALSE, color = "red", lwd = 2) +
labs(title = "Threat Scatterplot", x = "sumVals", y = "percentage")
#SCATTERPLOT NEUTRAL
# Extract sumVals and percentage variables
x <- check_answer_anxiety_correlation_df_neutral$sumVals
y <- check_answer_anxiety_correlation_df_neutral$percentage
# Generate predicted values
predicted <- predict(linear_model_check_answer_neutral)
# Create scatter plot with line of best fit
plot(x, y, main = "Threat Scatterplot", xlab = "sumVals", ylab = "percentage", pch = 16, col = "blue")
abline(linear_model_check_answer_neutral, col = "red", lwd = 2)
#create same scatter plot using ggplot (matter of preference)
library(ggplot2)
ggplot(data = check_answer_anxiety_correlation_df_neutral) +
geom_point(aes(x = sumVals, y = percentage), color = "blue", size = 3) +
geom_smooth(aes(x = sumVals, y = percentage), method = "lm", se = FALSE, color = "red", lwd = 2) +
labs(title = "Neutral Scatterplot", x = "sumVals", y = "percentage")
#SCATTERPLOT EQUAL
# Extract sumVals and percentage variables
x <- check_answer_anxiety_correlation_df_equal$sumVals
y <- check_answer_anxiety_correlation_df_equal$percentage
# Generate predicted values
predicted <- predict(linear_model_check_answer_equal)
# Create scatter plot with line of best fit
plot(x, y, main = "Threat Scatterplot", xlab = "sumVals", ylab = "percentage", pch = 16, col = "blue")
abline(linear_model_check_answer_equal, col = "red", lwd = 2)
#create same scatter plot using ggplot (matter of preference)
library(ggplot2)
ggplot(data = check_answer_anxiety_correlation_df_equal) +
geom_point(aes(x = sumVals, y = percentage), color = "blue", size = 3) +
geom_smooth(aes(x = sumVals, y = percentage), method = "lm", se = FALSE, color = "red", lwd = 2) +
labs(title = "Equal Scatterplot", x = "sumVals", y = "percentage")
library(tidyverse)
library(psycho)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/all_participants/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# group by subject and trial count, filter for trialAttempt == 1 and grab the first row
drop_combined_trials_df <- drop_df %>%
group_by(subject, trialCount) %>%
filter(trialAttempt == 1) %>%
slice(1) %>%
ungroup()
drop_combined_trials_df
# calculate percentage of threat being first vs. neutral being first drag out of all the trials for each subject
percentage_drop_threat_df <- drop_combined_trials_df %>%
group_by(subject) %>%
summarize(
percentage_threat = sum(dragThreat == "threat") / n() * 100,
percentage_neutral = sum(dragThreat == "neutral") / n() * 100
)
percentage_drop_threat_df
#ACCURACY INCLUDED
#filter where the first image participants dragged & dropped was accurate/they put it in the right spot, and observe based off of those trials
# group by subject and trial count, filter for trialAttempt == 1 and grab the first row, then filter for dragAcc == 1
drop_combined_trials_acc_df <- drop_df %>%
group_by(subject, trialCount) %>%
filter(trialAttempt == 1) %>%
slice(1) %>%
ungroup() %>%
filter(dragAcc == 1)
drop_combined_trials_acc_df
# calculate percentage of threat being first vs. neutral being first drag out of all the trials for each subject WHERE THEY WERE ACCURATE
percentage_drop_threat_acc_df <- drop_combined_trials_acc_df %>%
group_by(subject) %>%
summarize(
percentage_threat = sum(dragThreat == "threat") / n() * 100,
percentage_neutral = sum(dragThreat == "neutral") / n() * 100
)
percentage_drop_threat_acc_df
#manipulate structure of data frame
percentage_drop_plot_df <- percentage_drop_threat_df %>%
pivot_longer(cols = starts_with("percentage_"),
names_to = "threat_status",
values_to = "percentage") %>%
mutate(threat_status = gsub("percentage_", "", threat_status))
percentage_drop_plot_df
#INCLUDE STAI SCORES
#STAI scores - not including accuracy
percentage_drop_plot_df
df_pilot1_STAI_simple
percentage_drop_plot_anxiety_df <- merge(percentage_drop_plot_df, df_pilot1_STAI_simple, by = "subject")
percentage_drop_plot_anxiety_df
percentage_drop_plot_high_anxiety <- percentage_drop_plot_anxiety_df %>%
filter(anxiety_level == "high trait anxiety")
percentage_drop_plot_high_anxiety
percentage_drop_plot_moderate_anxiety <- percentage_drop_plot_anxiety_df %>%
filter(anxiety_level == "moderate trait anxiety")
percentage_drop_plot_moderate_anxiety
percentage_drop_plot_low_anxiety <- percentage_drop_plot_anxiety_df %>%
filter(anxiety_level == "low trait anxiety")
percentage_drop_plot_low_anxiety
percentage_drop_threat_acc_df
#manipulate structure of data frame
percentage_drop_plot_acc_df <- percentage_drop_threat_acc_df %>%
pivot_longer(cols = starts_with("percentage_"),
names_to = "threat_status",
values_to = "percentage") %>%
mutate(threat_status = gsub("percentage_", "", threat_status))
percentage_drop_plot_acc_df
#STAI scores - including accuracy
percentage_drop_plot_acc_df
df_pilot1_STAI_simple
percentage_drop_plot_anxiety_acc_df <- merge(percentage_drop_plot_acc_df, df_pilot1_STAI_simple, by = "subject")
percentage_drop_plot_anxiety_acc_df
percentage_drop_plot_high_anxiety_acc <- percentage_drop_plot_anxiety_acc_df %>%
filter(anxiety_level == "high trait anxiety")
percentage_drop_plot_high_anxiety_acc
percentage_drop_plot_moderate_anxiety_acc <- percentage_drop_plot_anxiety_acc_df %>%
filter(anxiety_level == "moderate trait anxiety")
percentage_drop_plot_moderate_anxiety_acc
percentage_drop_plot_low_anxiety_acc <- percentage_drop_plot_anxiety_acc_df %>%
filter(anxiety_level == "low trait anxiety")
percentage_drop_plot_low_anxiety_acc
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
percentage_drop_plot_df
percentage_drop_plot_acc_df
ggplot(data = percentage_drop_plot_df, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red")+
labs(fill = "Threat Status", x = "Threat Status", y = "Percentage", title = "% that Subject Selected Threat vs. Neutral Images on Their First Drag and Drop")
#change labels at some point to reflect that here, "threat_status" refers to which type of image the participant selected first to drag & drop, and "percentage" refers to the percent, for each subject, that out of how many trials it took them to complete the task, on the first attempt the first image they chose to drag & drop was a threat versus a neutral image
#added the dotted lines here to indicate percent if it was by chance - so 60% for neutral (red dotted line), 40% for threat (blue dotted line)
ggplot(data = percentage_drop_plot_acc_df, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red") +
labs(fill = "Threat Status", x = "Threat Status", y = "percentage", title = "% Subject Selected Threat vs. Neutral Image on First ACCURATE Drag & Drop")
#change labels at some point to reflect that here, "threat_status" refers to which type of image the participant selected first to drag & drop, and "percentage" refers to the percent, for each subject, that out of how many trials it took them to complete the task, on the first attempt the first image they chose to drag & drop was a threat versus a neutral image
#added the dotted lines here to indicate percent if it was by chance - so 60% for neutral (red dotted line), 40% for threat (blue dotted line)
#high anxiety plot
ggplot(data = percentage_drop_plot_high_anxiety, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red")+
labs(fill = "Threat Status", x = "Threat Status", y = "Percentage", title = "% High Anxiety Subject Selected Threat vs. Neutral Images on First Drag and Drop")
#moderate anxiety plot
ggplot(data = percentage_drop_plot_moderate_anxiety, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red")+
labs(fill = "Threat Status", x = "Threat Status", y = "Percentage", title = "% Moderate Anxiety Subject Selected Threat vs. Neutral Images on First Drag and Drop")
#low anxiety plot
ggplot(data = percentage_drop_plot_low_anxiety, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red")+
labs(fill = "Threat Status", x = "Threat Status", y = "Percentage", title = "% Low Anxiety Subject Selected Threat vs. Neutral Images on First Drag and Drop")
#high anxiety plot
ggplot(data = percentage_drop_plot_high_anxiety_acc, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red") +
labs(fill = "Threat Status", x = "Threat Status", y = "percentage", title = "% High Anxiety Subject Selected Threat vs. Neutral Image on 1st ACCURATE Drop")
#moderate anxiety plot
ggplot(data = percentage_drop_plot_moderate_anxiety_acc, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red") +
labs(fill = "Threat Status", x = "Threat Status", y = "percentage", title = "% Moderate Anxiety Subject Selected Threat vs. Neutral Image on 1st ACCURATE Drop")
#low anxiety plot
ggplot(data = percentage_drop_plot_low_anxiety_acc, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1, height = 0.0) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red") +
labs(fill = "Threat Status", x = "Threat Status", y = "percentage", title = "% Low Anxiety Subject Selected Threat vs. Neutral Image on 1st ACCURATE Drop")
library(tidyverse)
library(dplyr)
#BASIC MANIPULATION
STAI_correlation_df <- read_csv('/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/all_participants/STAI_scores_calculated.csv')
# Create just the STAI score, subject, and anxiety level
STAI_correlation_df <- STAI_correlation_df %>%
select(subjectID, sumVals, anxiety_level)
STAI_correlation_df
# Change column name 'subjectID' to 'subject' for merging
colnames(STAI_correlation_df)[1] <- "subject"
STAI_correlation_df
#DROP
# Load df with drop event stuff you need
percentage_drop_plot_df
#merge the two dfs together to get the df you need for this linear correlation
drop_anxiety_correlation_df <- merge(percentage_drop_plot_df, STAI_correlation_df, by = "subject", all = TRUE)
drop_anxiety_correlation_df
#create a df for just threat and a df for just neutral
drop_anxiety_correlation_df_threat <- drop_anxiety_correlation_df %>%
filter(threat_status == 'threat')
drop_anxiety_correlation_df_threat
drop_anxiety_correlation_df_neutral <- drop_anxiety_correlation_df %>%
filter(threat_status == 'neutral')
drop_anxiety_correlation_df_neutral
#linear model stuff for correlation - mean_acc and sumVals
#threat
#initial model
linear_model_drop_threat <- lm(percentage ~ sumVals, data = drop_anxiety_correlation_df_threat)
summary(linear_model_drop_threat)
linear_model_drop_neutral <- lm(percentage ~ sumVals, data = drop_anxiety_correlation_df_neutral)
summary(linear_model_drop_neutral)
#evaluating assumptions?????
#SCATTERPLOT THREAT
# Extract sumVals and percentage variables
x <- drop_anxiety_correlation_df_threat$sumVals
y <- drop_anxiety_correlation_df_threat$percentage
# Generate predicted values
predicted <- predict(linear_model_drop_threat)
# Create scatter plot with line of best fit
plot(x, y, main = "Threat Scatterplot", xlab = "sumVals", ylab = "percentage", pch = 16, col = "blue")
abline(linear_model_drop_threat, col = "red", lwd = 2)
#create same scatter plot using ggplot (matter of preference)
library(ggplot2)
ggplot(data = drop_anxiety_correlation_df_threat) +
geom_point(aes(x = sumVals, y = percentage), color = "blue", size = 3) +
geom_smooth(aes(x = sumVals, y = percentage), method = "lm", se = FALSE, color = "red", lwd = 2) +
labs(title = "Threat Scatterplot", x = "sumVals", y = "percentage")
#SCATTERPLOT NEUTRAL
# Extract sumVals and percentage variables
x <- drop_anxiety_correlation_df_neutral$sumVals
y <- drop_anxiety_correlation_df_neutral$percentage
# Generate predicted values
predicted <- predict(linear_model_drop_threat)
# Create scatter plot with line of best fit
plot(x, y, main = "Threat Scatterplot", xlab = "sumVals", ylab = "percentage", pch = 16, col = "blue")
abline(linear_model_drop_neutral, col = "red", lwd = 2)
#create same scatter plot using ggplot (matter of preference)
library(ggplot2)
ggplot(data = drop_anxiety_correlation_df_neutral) +
geom_point(aes(x = sumVals, y = percentage), color = "blue", size = 3) +
geom_smooth(aes(x = sumVals, y = percentage), method = "lm", se = FALSE, color = "red", lwd = 2) +
labs(title = "Neutral Scatterplot", x = "sumVals", y = "percentage")
#iterate through data frame for each subject
for (subject in unique_subjects) {
#get data frame for current subject
subject_df <- avg_check_answer_acc_df_list[[subject]]
#make the plot for current subject
plot <- ggplot(subject_df) +
geom_line(aes(x = trialCount, y = threat, color = "Threat")) +
geom_line(aes(x = trialCount, y = neutral, color = "Neutral")) +
geom_point(aes(x = trialCount, y = threat, color = "Threat")) +
geom_point(aes(x = trialCount, y = neutral, color = "Neutral")) +
labs(title = paste("Subject:", subject), x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
#print plot for subject
print(plot)
}
#iterate through data frame for each subject
for (subject in unique_subjects) {
#get data frame for current subject
subject_df <- avg_check_answer_acc_df_list[[subject]]
#make the plot for current subject
plot <- ggplot(subject_df) +
geom_line(aes(x = trialCount, y = threat, color = "Threat")) +
geom_line(aes(x = trialCount, y = neutral, color = "Neutral")) +
geom_point(aes(x = trialCount, y = threat, color = "Threat")) +
geom_point(aes(x = trialCount, y = neutral, color = "Neutral")) +
labs(title = paste("Subject:", subject), x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
#print plot for subject
print(plot)
}
ggplot(average_across_df) +
geom_line(aes(x = trial, y = threat, color = "Threat")) +
geom_line(aes(x = trial, y = neutral, color = "Neutral")) +
geom_point(aes(x = trial, y = threat, color = "Threat")) +
geom_point(aes(x = trial, y = neutral, color = "Neutral")) +
labs(title = "Average Across Subjects", x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
#plot for average across subjects
plot_avg <- ggplot(average_across_df) +
geom_line(aes(x = trial, y = threat), color = "red", size = 3) +
geom_line(aes(x = trial, y = neutral), color = "blue", size = 3) +
geom_point(aes(x = trial, y = threat), color = "red", size = 4) +
geom_point(aes(x = trial, y = neutral), color = "blue", size = 4) +
labs(title = "Average Across Subjects Against Individual Subjects", x = "Trial", y = "Accuracy (%)")
#iterate through each subjects data frame, and semi-transparent thin lines to the plot_avg
for (subject in unique_subjects) {
#df for current subject
subject_df <- avg_check_answer_acc_df_list[[subject]]
#add a line to the plot for that current subject (and make the line semi-transparent)
plot_avg <- plot_avg +
geom_line(data = subject_df, aes(x = trialCount, y = threat), color = "red", alpha = 0.3) +
geom_line(data = subject_df, aes(x = trialCount, y = neutral), color = "blue", alpha = 0.3)
}
plot_avg
#checking for duplicate participants
df <- read_csv('/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/all_participants/combinedData_Anxiety_Cognitive_Maps.csv')
df_check <- df %>%
group_by(subject)
View(df_check)
df_check <- df %>%
group_by(subject) %>%
mutate(row_count = n())
df_check
df_check <- df %>%
group_by(subject) %>%
mutate(row_count = n()) %>%
select(subject, row_count)
df_check
View(df_check)
check_df
#checking for duplicate participants
check_df <- read_csv('/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/all_participants/STAI_scores_calculated.csv')
check_df
check_df <- check_df %>%
group_by(subject) %>%
mutate(row_count = n())
check_df
View(check_df)
check_df <- check_df %>%
group_by(subject) %>%
mutate(row_count = n()) %>%
select(subject, row_count)
check_df
check_df
View(check_df)
check_df <- check_df %>%
group_by(subjectID) %>%
mutate(row_count = n()) %>%
select(subjectID, row_count)
check_df
View(check_df)
