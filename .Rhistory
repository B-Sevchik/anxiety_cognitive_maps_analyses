option2Node, option2ImageFile, option2CommunityNumber, option2ThreatStatus,
option3Node, option3ImageFile, option3CommunityNumber, option3ThreatStatus) %>%
mutate(all_threat_status = case_when(
(option1ThreatStatus == 'threat' & option2ThreatStatus == 'threat' & option3ThreatStatus == 'threat') ~ 'all_threat',
(option1ThreatStatus == 'neutral' & option2ThreatStatus == 'neutral' & option3ThreatStatus == 'neutral') ~ 'all_neutral'
))
all_same_threat_ooo_df
View(all_same_threat_ooo_df)
library(tidyverse)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot3/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
ooo_df <- df %>%
filter(taskName == 'oddOneOutTest')
ooo_df
all_same_threat_ooo_df <- ooo_df %>%
select(chosenNode, chosenImageFile, chosenCommunityNumber, chosenThreatStatus,
option1Node, option1ImageFile, option1CommunityNumber, option1ThreatStatus,
option2Node, option2ImageFile, option2CommunityNumber, option2ThreatStatus,
option3Node, option3ImageFile, option3CommunityNumber, option3ThreatStatus) %>%
mutate(all_threat_status = case_when(
(option1ThreatStatus == 'threat' & option2ThreatStatus == 'threat' & option3ThreatStatus == 'threat') ~ 'all_threat',
(option1ThreatStatus == 'neutral' & option2ThreatStatus == 'neutral' & option3ThreatStatus == 'neutral') ~ 'all_neutral'
)) %>%
filter(all_threat_status == 'all_threat' | all_threat_status == 'all_neutral')
all_same_threat_ooo_df
View(all_same_threat_ooo_df)
library(tidyverse)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot3/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
ooo_df <- df %>%
filter(taskName == 'oddOneOutTest')
ooo_df
all_same_threat_ooo_df <- ooo_df %>%
select(chosenNode, chosenImageFile, chosenCommunityNumber, chosenThreatStatus,
option1Node, option1ImageFile, option1CommunityNumber, option1ThreatStatus,
option2Node, option2ImageFile, option2CommunityNumber, option2ThreatStatus,
option3Node, option3ImageFile, option3CommunityNumber, option3ThreatStatus) %>%
mutate(all_threat_status = case_when(
(option1ThreatStatus == 'threat' & option2ThreatStatus == 'threat' & option3ThreatStatus == 'threat') ~ 'all_threat',
(option1ThreatStatus == 'neutral' & option2ThreatStatus == 'neutral' & option3ThreatStatus == 'neutral') ~ 'all_neutral'
)) %>%
filter(all_threat_status == 'all_threat' | all_threat_status == 'all_neutral')
all_same_threat_ooo_df
###
#include STAI scores in ooo analyses
df_STAI_ooo <- read_csv('/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot3/STAI_scores_calculated.csv')
df_STAI_ooo
df_pilot1_STAI_simple <- df_STAI_ooo %>%
select(subjectID, anxiety_level)
df_pilot1_STAI_simple
names(df_pilot1_STAI_simple) <- c('subject', 'anxiety_level')
df_pilot1_STAI_simple
ooo_anxiety_df <- merge(all_same_threat_ooo_df, df_pilot1_STAI_simple, by = "subject", all = TRUE)
ooo_anxiety_df
all_same_threat_ooo_df
View(ooo_anxiety_df)
df_pilot1_STAI_simple
names(df_pilot1_STAI_simple) <- c('subject', 'anxiety_level')
df_pilot1_STAI_simple
ooo_anxiety_df <- merge(all_same_threat_ooo_df, df_pilot1_STAI_simple, by = "subject", all = TRUE)
ooo_anxiety_df
subject_acc_ooo_df <- ooo_df %>%
group_by(subject, chosenThreatStatus) %>%
summarize(mean_acc = mean(acc))
subject_acc_ooo_df
ggplot(subject_acc_ooo_df, aes(x = chosenThreatStatus, y = mean_acc, fill=chosenThreatStatus)) +
geom_boxplot(alpha=0.5) +
geom_jitter(width=0.1) +
labs(title = "Mean Accuracy by Subject in Odd One Out Task by Chosen Threat Status", x = "Chosen Threat Status", y = "Mean Accuracy")
#Percentage that participants, out of trials when they were inaccurate and the other inaccurate option was a different threat type, chose threat vs. neutral incorrect images
threat_percent_ooo_df <- mistake_df %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
threat_percent_ooo_df
#Percentage that participants, out of trials when they were inaccurate and the other inaccurate option was a different threat type, chose threat vs. neutral incorrect images
ggplot(data = threat_percent_ooo_df, mapping = aes(x = chosenThreatStatus, y = percentage_chosenThreatStatus)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "Chosen Threat Status", y = "Percentage", title = "% Participants Chose Threat vs. Neutral Inaccurate Images in Odd One Out Task") +
scale_x_discrete(labels = c("neutral", "threat"))
threat_percent_subjects_df <- mistake_df %>%
group_by(subject) %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
threat_percent_subjects_df
all_same_threat_ooo_df
View(all_same_threat_ooo_df)
View(df)
View(all_same_threat_ooo_df)
View(ooo_df)
View(ooo_acc)
View(ooo_df)
all_same_threat_ooo_df <- ooo_df %>%
select(acc, chosenNode, chosenImageFile, chosenCommunityNumber, chosenThreatStatus,
option1Node, option1ImageFile, option1CommunityNumber, option1ThreatStatus,
option2Node, option2ImageFile, option2CommunityNumber, option2ThreatStatus,
option3Node, option3ImageFile, option3CommunityNumber, option3ThreatStatus) %>%
mutate(all_threat_status = case_when(
(option1ThreatStatus == 'threat' & option2ThreatStatus == 'threat' & option3ThreatStatus == 'threat') ~ 'all_threat',
(option1ThreatStatus == 'neutral' & option2ThreatStatus == 'neutral' & option3ThreatStatus == 'neutral') ~ 'all_neutral'
)) %>%
filter(all_threat_status == 'all_threat' | all_threat_status == 'all_neutral')
all_same_threat_ooo_df
all_same_threat_ooo_df <- ooo_df %>%
select(acc, subject, chosenNode, chosenImageFile, chosenCommunityNumber, chosenThreatStatus,
option1Node, option1ImageFile, option1CommunityNumber, option1ThreatStatus,
option2Node, option2ImageFile, option2CommunityNumber, option2ThreatStatus,
option3Node, option3ImageFile, option3CommunityNumber, option3ThreatStatus) %>%
mutate(all_threat_status = case_when(
(option1ThreatStatus == 'threat' & option2ThreatStatus == 'threat' & option3ThreatStatus == 'threat') ~ 'all_threat',
(option1ThreatStatus == 'neutral' & option2ThreatStatus == 'neutral' & option3ThreatStatus == 'neutral') ~ 'all_neutral'
)) %>%
filter(all_threat_status == 'all_threat' | all_threat_status == 'all_neutral')
all_same_threat_ooo_df
all_same_ooo_acc_df <- all_same_threat_ooo_df %>%
group_by(subject, all_threat_status) %>%
summarise(percentage_acc_1 = sum(acc == 1) / n() * 100)
all_same_ooo_acc_df
ggplot(all_same_ooo_acc_df, aes(x = all_threat_status, y = percentage_acc_1)) +
geom_boxplot() +
ylab("Mean Accuracy (%)") +
xlab("all_threat_status")
ggplot(data = threat_percent_subjects_df, mapping = aes(x = chosenThreatStatus, y = percentage_chosenThreatStatus, fill = chosenThreatStatus)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
labs(title = "% Each Subject Chose Threat vs. Neutral Inaccurate Images in Odd One Out Task", x = "Chosen Threat Status", y = "Percentage")
ggplot(data = all_same_ooo_acc_df, mapping = aes(x = all_threat_status, y = percentage_acc_1, fill = all_threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
labs(title = "% Each Subject Was Accurate Depending on if all 3 images were threat or neutral", x = "all_threat_status", y = "Mean Accuracy (%)")
View(cdc)
all_same_ooo_acc_df
#across subjects plot comparing accuracy
all_same_ooo_mean_acc_df <- all_same_ooo_acc_df %>%
group_by(all_threat_status) %>%
summarise(mean_acc = mean(percentage_acc_1))
all_same_ooo_mean_acc_df
ggplot(mean_acc, aes(x = all_threat_status, y = mean_acc)) +
geom_bar(stat = "identity", fill = "steelblue") +
ylab("Mean Accuracy (%)") +
xlab("all_threat_status")
#Percentage that participants, out of trials when they were inaccurate and the other inaccurate option was a different threat type, chose threat vs. neutral incorrect images
threat_percent_ooo_df <- mistake_df %>%
count(chosenThreatStatus) %>%
mutate(total_observations = nrow(mistake_df)) %>%
mutate(percentage_chosenThreatStatus = (n/total_observations)*100)
threat_percent_ooo_df
ggplot(data = threat_percent_subjects_df, mapping = aes(x = chosenThreatStatus, y = percentage_chosenThreatStatus, fill = chosenThreatStatus)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
labs(title = "% Each Subject Chose Threat vs. Neutral Inaccurate Images in Odd One Out Task", x = "Chosen Threat Status", y = "Percentage")
all_same_ooo_mean_acc_df
ggplot(data = all_same_ooo_mean_acc_df, mapping = aes(x = all_threat_status, y = mean_acc)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(x = "all_threat_status", y = "Mean Accuracy (%)", title = "% Accuracy Depending on if all 3 images were threat or neutral") +
scale_x_discrete(labels = c("all_threat", "all_neutral"))
all_same_ooo_acc_df
###
#include STAI scores in ooo analyses
df_STAI_ooo <- read_csv('/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot3/STAI_scores_calculated.csv')
df_STAI_ooo
df_pilot1_STAI_simple <- df_STAI_ooo %>%
select(subjectID, anxiety_level)
df_pilot1_STAI_simple
names(df_pilot1_STAI_simple) <- c('subject', 'anxiety_level')
df_pilot1_STAI_simple
ooo_anxiety_new_df <- merge(all_same_ooo_acc_df, df_pilot1_STAI_simple, by = "subject", all = TRUE)
ooo_anxiety_new_df
#high anxiety data frame, ooo first plot
high_anxiety_threat_df <- ooo_anxiety_new_df %>%
filter(anxiety_level == 'high trait anxiety')
high_anxiety_threat_df
#high anxiety data frame, ooo first plot
high_anxiety_threat_df <- ooo_anxiety_new_df %>%
filter(anxiety_level == 'high trait anxiety')
high_anxiety_threat_df
#moderate anxiety data frame, ooo first plot
moderate_anxiety_threat_df <- ooo_anxiety_new_df %>%
filter(anxiety_level == 'moderate trait anxiety')
moderate_anxiety_threat_df
#high anxiety data frame, ooo first plot
low_anxiety_threat_df <- ooo_anxiety_new_df %>%
filter(anxiety_level == 'low trait anxiety')
low_anxiety_threat_df
ggplot(data = high_anxiety_threat_df, mapping = aes(x = all_threat_status, y = percentage_acc_1, fill = all_threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
labs(title = "High anxiety, % Each Subject Was Accurate Depending on if all 3 images were threat or neutral", x = "all_threat_status", y = "Mean Accuracy (%)")
#high anxiety
ggplot(data = high_anxiety_threat_df, mapping = aes(x = all_threat_status, y = percentage_acc_1, fill = all_threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
labs(title = "High anxiety, % Each Subject Was Accurate Depending on if all 3 images were threat or neutral", x = "all_threat_status", y = "Mean Accuracy (%)")
#fixing some error that pops up with moderate anxiety "must request at least one colour from a hue palette"
my_palette <- c("#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
#moderate anxiety
ggplot(data = moderate_anxiety_threat_df, mapping = aes(x = all_threat_status, y = percentage_acc_1, fill = all_threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
labs(title = "Moderate anxiety, % Each Subject Was Accurate Depending on if all 3 images were threat or neutral", x = "all_threat_status", y = "Mean Accuracy (%)")
#low anxiety
ggplot(data = low_anxiety_threat_df, mapping = aes(x = all_threat_status, y = percentage_acc_1, fill = all_threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
labs(title = "Low anxiety, % Each Subject Was Accurate Depending on if all 3 images were threat or neutral", x = "all_threat_status", y = "Mean Accuracy (%)")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
#iterate through data frame for each subject
for (subject in unique_subjects) {
#get data frame for current subject
subject_df <- avg_check_answer_acc_df_list[[subject]]
anxiety_level <- df_pilot1_STAI_simple[df_pilot1_STAI_simple$subject == subject, "anxiety_level"]
anxiety_level_value <- anxiety_level[1]
#make the plot for current subject
plot <- ggplot(subject_df) +
geom_line(aes(x = trialCount, y = threat, color = "Threat")) +
geom_line(aes(x = trialCount, y = neutral, color = "Neutral")) +
geom_point(aes(x = trialCount, y = threat, color = "Threat")) +
geom_point(aes(x = trialCount, y = neutral, color = "Neutral")) +
labs(title = paste("Subject:", subject, anxiety_level_value), x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
#print plot for subject
print(plot)
}
library(tidyverse)
library(psycho)
check_answer_df
check_answer_df_1 <- check_answer_df %>%
group_by(subject) %>%
slice(1)
check_answer_df_1
#CREATE LISTS OF THE THREAT AND NEUTRAL SLOTS FOR EACH SUBJECT
# initialize an empty list for each subject for which of the slots are threat slots and which are neutral slots
threat_slots_list <- list()
neutral_slots_list <- list()
for (subject in unique(check_answer_df$subject)) {
slots_with_threat <- c()
slots_with_neutral <- c()
#look through correct type column for each slot
for (slot_col in grep("slot[0-9]+CorrectType", colnames(check_answer_df), value = TRUE)) {
CorrectType <- unique(check_answer_df[check_answer_df$subject == subject, slot_col])
#if value is threat, add to threat vector
if (CorrectType == 'threat') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_threat <- c(slots_with_threat, slot_name)
#if value is neutral, add to neutral vector
} else if (CorrectType == 'neutral') {
slot_name <- sub("CorrectType", "", slot_col)
slots_with_neutral <- c(slots_with_neutral, slot_name)
}
}
threat_slots_list[[subject]] <- slots_with_threat
neutral_slots_list[[subject]] <- slots_with_neutral
}
threat_slots_list
neutral_slots_list
#MANIPULATE THE DATA FRAME SO IT IS IN THE DESIRED FORMAT
# Calculate the percentage of accuracy, for one slot
#accuracy_df <- check_answer_df %>%
#group_by(subject, trialCount) %>%
#summarize(accuracy = sum(slot0Acc == 1) / max(trialAttempt) * 100)
#accuracy_df
#find the accuracy values for each slot for each trial for each subject
check_answer_df_2 <- check_answer_df %>%
select(subject, trialCount, trialAttempt, slot0Acc, slot1Acc, slot2Acc, slot3Acc, slot4Acc, slot5Acc, slot6Acc, slot7Acc, slot8Acc, slot9Acc)
accuracy_df <- check_answer_df_2 %>%
group_by(subject, trialCount) %>%
summarize(across(starts_with('slot'), ~sum(. == 1) / max(trialAttempt) * 100, .names = "accuracy_slot{str_extract(.col, '\\\\d+')}"))
accuracy_df
#make a list of separate data frames in a list for each subject
#unique subjects
unique_subjects <- unique(accuracy_df$subject)
accuracy_df_list <- list()
#iterate through each subject and make a data frame of accuracy just for that subject, then append it to the final list
for (subject in unique_subjects) {
accuracy_df_subject <- accuracy_df[accuracy_df$subject == subject, ]
accuracy_df_list[[subject]] <- accuracy_df_subject
}
accuracy_df_list
#CHANGE THE NAMES OF THE COLUMNS TO THREAT OR NEUTRAL CORRESPONDING TO LISTS OF THREAT AND NEUTRAL SLOTS FOR EACH SUBJECT GENERATED EARLIER
#iterate through each subject's accuracy data frame
for (subject in unique_subjects) {
accuracy_df_subject <- accuracy_df[accuracy_df$subject == subject, ]
#access the corresponding threat and neutral slots for each subject
threat_slots <- threat_slots_list[[subject]]
neutral_slots <- neutral_slots_list[[subject]]
#iterate through the columns 3-12 of the accuracy data frame and replace the column names with threat or neutral corresponding to the threat and neutral slots for that subject
for (i in 3:12) {
col_name <- names(accuracy_df_subject)[i]
#check if that column (that slot) is a threat slot
if (any(grepl(paste0("slot", i - 3), threat_slots))) {
#replace the column name with 'threat'if so
names(accuracy_df_subject)[i] <- "threat"
}
#check if that column (that slot) is a neutral slot
else if (any(grepl(paste0("slot", i - 3), neutral_slots))) {
# replace the column name with 'neutral' if so
names(accuracy_df_subject)[i] <- "neutral"
}
}
#add the data frame that results from each subject to a list of the data frames for all subjects, making accuracy_df_list have the correct column names
accuracy_df_list[[subject]] <- accuracy_df_subject
}
accuracy_df_list
#AVERAGE THE THREAT & NEUTRAL SLOTS TOGETHER
#initialize empty data frame
avg_check_answer_acc_df <- data.frame(subject = character(),
trialCount = integer(),
threat = numeric(),
neutral = numeric(),
stringsAsFactors = FALSE)
#iterate through the subjects
for (subject in unique_subjects) {
accuracy_df_subject <- accuracy_df_list[[subject]]
#calculate average for threat and neutral columns
avg_threat <- rowMeans(accuracy_df_subject[, grepl("threat", names(accuracy_df_subject))])
avg_neutral <- rowMeans(accuracy_df_subject[, grepl("neutral", names(accuracy_df_subject))])
trialCount <- accuracy_df_subject$trialCount
#initialize a data frame for the current subject
subject_df <- data.frame(subject = subject,
trialCount = trialCount,
threat = avg_threat,
neutral = avg_neutral,
stringsAsFactors = FALSE)
#add the current subject's data frame to the final data frame
avg_check_answer_acc_df <- rbind(avg_check_answer_acc_df, subject_df)
}
avg_check_answer_acc_df
#split the avg_check_answer_acc_df into different data frames for each subject
#initialize empty list
avg_check_answer_acc_df_list <- list()
#iterate through each subject & add their data frame to the list
for (subject in unique_subjects) {
subject_df <- avg_check_answer_acc_df[avg_check_answer_acc_df$subject == subject, ]
avg_check_answer_acc_df_list[[subject]] <- subject_df
}
avg_check_answer_acc_df_list
#AVERAGE ACROSS SUBJECTS
#set up data frame
avg_across_check_answer_acc_df <- data.frame(trial = integer(),
threat = numeric(),
neutral = numeric(),
stringsAsFactors = FALSE)
#iterate through each subject
for (subject in unique_subjects) {
accuracy_df_subject_2 <- accuracy_df_list[[subject]]
#calculate threat average and neutral average
avg_threat_2 <- rowMeans(accuracy_df_subject[, grepl("threat", names(accuracy_df_subject))])
avg_neutral_2 <- rowMeans(accuracy_df_subject[, grepl("neutral", names(accuracy_df_subject))])
trialCount_2 <- accuracy_df_subject$trialCount
#initialize a data frame for the current subject
subject_df_2 <- data.frame(trial = trialCount_2,
threat = avg_threat_2,
neutral = avg_neutral_2,
stringsAsFactors = FALSE)
#add current subject data frame to final data frame
avg_across_check_answer_acc_df <- rbind(avg_across_check_answer_acc_df, subject_df_2)
}
avg_across_check_answer_acc_df
#calculate average across subjects
average_across_df <- avg_across_check_answer_acc_df %>%
group_by(trial) %>%
summarize(across(c(threat, neutral), mean))
average_across_df
#AVERAGE ACROSS SUBJECTS, ADD STAI SCORES
df_pilot1_STAI_simple
#set up data frame
avg_across_check_low_anxiety_df <- data.frame(trial = integer(),
threat = numeric(),
neutral = numeric(),
stringsAsFactors = FALSE)
avg_across_check_moderate_anxiety_df <- data.frame(trial = integer(),
threat = numeric(),
neutral = numeric(),
stringsAsFactors = FALSE)
avg_across_check_high_anxiety_df <- data.frame(trial = integer(),
threat = numeric(),
neutral = numeric(),
stringsAsFactors = FALSE)
#iterate through each subject
for (subject in unique_subjects) {
accuracy_df_subject_2 <- accuracy_df_list[[subject]]
#calculate threat average and neutral average
avg_threat_2 <- rowMeans(accuracy_df_subject[, grepl("threat", names(accuracy_df_subject))])
avg_neutral_2 <- rowMeans(accuracy_df_subject[, grepl("neutral", names(accuracy_df_subject))])
trialCount_2 <- accuracy_df_subject$trialCount
#initialize a data frame for the current subject
subject_df_2 <- data.frame(trial = trialCount_2,
threat = avg_threat_2,
neutral = avg_neutral_2,
stringsAsFactors = FALSE)
subject_anxiety <- df_pilot1_STAI_simple[df_pilot1_STAI_simple$subject == subject, "anxiety_level"]
#add current subject data frame to final data frame
if (subject_anxiety == "low trait anxiety"){
avg_across_check_low_anxiety_df <- rbind(avg_across_check_low_anxiety_df, subject_df_2)
}
else if (subject_anxiety == "moderate trat anxiety"){
avg_across_check_moderate_anxiety_df <- rbind(avg_across_check_moderate_anxiety_df, subject_df_2)
}
else if (subject_anxiety == "high trait anxiety"){
avg_across_check_high_anxiety_df <- rbind(avg_across_check_high_anxiety_df, subject_df_2)
}
}
avg_across_check_low_anxiety_df
avg_across_check_moderate_anxiety_df
avg_across_check_high_anxiety_df
#calculate average across subjects
avg_across_low_anxiety_df <- avg_across_check_low_anxiety_df %>%
group_by(trial) %>%
summarize(across(c(threat, neutral), mean))
avg_across_low_anxiety_df
avg_across_moderate_anxiety_df <- avg_across_check_moderate_anxiety_df %>%
group_by(trial) %>%
summarize(across(c(threat, neutral), mean))
avg_across_moderate_anxiety_df
avg_across_high_anxiety_df <- avg_across_check_high_anxiety_df %>%
group_by(trial) %>%
summarize(across(c(threat, neutral), mean))
avg_across_high_anxiety_df
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
avg_check_answer_acc_df_list
#iterate through data frame for each subject
for (subject in unique_subjects) {
#get data frame for current subject
subject_df <- avg_check_answer_acc_df_list[[subject]]
#make the plot for current subject
plot <- ggplot(subject_df) +
geom_line(aes(x = trialCount, y = threat, color = "Threat")) +
geom_line(aes(x = trialCount, y = neutral, color = "Neutral")) +
geom_point(aes(x = trialCount, y = threat, color = "Threat")) +
geom_point(aes(x = trialCount, y = neutral, color = "Neutral")) +
labs(title = paste("Subject:", subject), x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
#print plot for subject
print(plot)
}
#iterate through data frame for each subject
for (subject in unique_subjects) {
#get data frame for current subject
subject_df <- avg_check_answer_acc_df_list[[subject]]
anxiety_level <- df_pilot1_STAI_simple[df_pilot1_STAI_simple$subject == subject, "anxiety_level"]
anxiety_level_value <- anxiety_level[1]
#make the plot for current subject
plot <- ggplot(subject_df) +
geom_line(aes(x = trialCount, y = threat, color = "Threat")) +
geom_line(aes(x = trialCount, y = neutral, color = "Neutral")) +
geom_point(aes(x = trialCount, y = threat, color = "Threat")) +
geom_point(aes(x = trialCount, y = neutral, color = "Neutral")) +
labs(title = paste("Subject:", subject, anxiety_level_value), x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
#print plot for subject
print(plot)
}
average_across_df
ggplot(average_across_df) +
geom_line(aes(x = trial, y = threat, color = "Threat")) +
geom_line(aes(x = trial, y = neutral, color = "Neutral")) +
geom_point(aes(x = trial, y = threat, color = "Threat")) +
geom_point(aes(x = trial, y = neutral, color = "Neutral")) +
labs(title = "Average Across Subjects", x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
ggplot(avg_across_low_anxiety_df) +
geom_line(aes(x = trial, y = threat, color = "Threat")) +
geom_line(aes(x = trial, y = neutral, color = "Neutral")) +
geom_point(aes(x = trial, y = threat, color = "Threat")) +
geom_point(aes(x = trial, y = neutral, color = "Neutral")) +
labs(title = "Check Answer Average Across Subjects with Low Trait Anxiety", x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
ggplot(avg_across_moderate_anxiety_df) +
geom_line(aes(x = trial, y = threat, color = "Threat")) +
geom_line(aes(x = trial, y = neutral, color = "Neutral")) +
geom_point(aes(x = trial, y = threat, color = "Threat")) +
geom_point(aes(x = trial, y = neutral, color = "Neutral")) +
labs(title = "Check Answer Average Across Subjects with Moderate Trait Anxiety", x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
ggplot(avg_across_high_anxiety_df) +
geom_line(aes(x = trial, y = threat, color = "Threat")) +
geom_line(aes(x = trial, y = neutral, color = "Neutral")) +
geom_point(aes(x = trial, y = threat, color = "Threat")) +
geom_point(aes(x = trial, y = neutral, color = "Neutral")) +
labs(title = "Check Answer Average Across Subjects with High Trait Anxiety", x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
# Set the transparency level for the second plot
transparency <- 0.3
# Create the first plot (thin and transparent line)
for (subject in unique_subjects) {
subject_df <- avg_check_answer_acc_df_list[[subject]]
plot <- ggplot(subject_df) +
geom_line(aes(x = trialCount, y = threat, color = "Threat"), size = 0.8, alpha = transparency) +
geom_line(aes(x = trialCount, y = neutral, color = "Neutral"), size = 0.8, alpha = transparency) +
geom_point(aes(x = trialCount, y = threat, color = "Threat")) +
geom_point(aes(x = trialCount, y = neutral, color = "Neutral")) +
labs(title = paste("Subject:", subject), x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
print(plot)
}
# Add the second plot in the background
ggplot(average_across_df) +
geom_line(aes(x = trial, y = threat, color = "Threat")) +
geom_line(aes(x = trial, y = neutral, color = "Neutral")) +
geom_point(aes(x = trial, y = threat, color = "Threat")) +
geom_point(aes(x = trial, y = neutral, color = "Neutral")) +
labs(title = "Average Across Subjects", x = "Trial", y = "Accuracy (%)") +
scale_color_manual(values = c(Threat = "red", Neutral = "blue"))
