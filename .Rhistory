#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
#subject specific
drop_combined_trials_df <- data.frame()
for (trial_count in seq(1,500)) {
filtered_drop_df <- drop_df %>%
filter(subject == 'a273wocs111dh0', trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
drop_combined_trials_df <- rbind(drop_combined_trials_df, filtered_drop_df)
}
drop_combined_trials_df
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# Create an empty dataframe to store the results
drop_combined_trials_df <- data.frame()
# Group the dataframe by subject
grouped_df <- drop_df %>%
group_by(subject)
# Iterate through each subject
for (subject in unique(drop_df$subject)) {
# Filter and slice the first row for each trialCount and trialAttempt
filtered_drop_df <- grouped_df %>%
filter(subject == subject, trialCount %in% seq(1, 500), trialAttempt == 1) %>%
slice(1)
# Append the filtered dataframe to the combined dataframe
drop_combined_trials_df <- bind_rows(drop_combined_trials_df, filtered_drop_df)
}
# Remove grouping information
drop_combined_trials_df <- drop_combined_trials_df %>% ungroup()
# View the resulting combined dataframe
drop_combined_trials_df
library(tidyverse)
library(psycho)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# Create an empty dataframe to store the results
drop_combined_trials_df <- data.frame()
# Iterate through each subject
for (subject in unique(drop_df$subject)) {
# Iterate through each trial count
for (trial_count in 1:5) {
# Filter and slice the first row for each trialCount and trialAttempt
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
# Append the filtered dataframe to the combined dataframe
drop_combined_trials_df <- bind_rows(drop_combined_trials_df, filtered_drop_df)
}
}
# View the resulting combined dataframe
drop_combined_trials_df
library(tidyverse)
library(psycho)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# Create an empty dataframe to store the results
drop_combined_trials_df <- data.frame()
# Iterate through each subject
for (subject in unique(drop_df$subject)) {
# Determine the trial count range for the current subject
trial_count_range <- unique(drop_df$trialCount[drop_df$subject == subject])
# Iterate through each trial count for the current subject
for (trial_count in trial_count_range) {
# Filter and slice the first row for each trialCount and trialAttempt
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
# Append the filtered dataframe to the combined dataframe
drop_combined_trials_df <- bind_rows(drop_combined_trials_df, filtered_drop_df)
}
}
# View the resulting combined dataframe
drop_combined_trials_df
#create relevant data frame grabbing the first drag for each trial for each of the subjects - doesn't work quite right when add for each subect idk
drop_combined_trials_df <- data.frame()
for (subject in unique(drop_df$subject)){
for (trial_count in unique(drop_df$trialCount)) {
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1)
drop_combined_trials_df <- rbind(drop_combined_trials_df, filtered_drop_df)
}
}
drop_combined_trials_df
#subject specific
drop_combined_trials_df <- data.frame()
for (trial_count in seq(1,500)) {
filtered_drop_df <- drop_df %>%
filter(subject == 'a273wocs111dh0', trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
drop_combined_trials_df <- rbind(drop_combined_trials_df, filtered_drop_df)
}
drop_combined_trials_df
#####up to this point def works
subjects_drop_df <- data.frame()
for (subject in unique(drop_df)) {
print('hi')
}
#just make a data frame with all the subjects
unique_subjects <- unique(drop_df$subject)
for (subject in unique(subjects)){
print('hi')
}
#just make a data frame with all the subjects
unique_subjects <- unique(drop_df$subject)
for (subject in unique_subjects){
print('hi')
}
#just make a data frame with all the subjects
unique_subjects <- unique(drop_df$subject)
for (subject in unique_subjects){
drop_combined_trials_df <- data.frame()
for (trial_count in seq(1,500)){
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
drop_combined_trials_df <- rbind(drop_combined_trials_df, filtered_drop_df)
}
drop_combined_trials_df
}
library(tidyverse)
library(psycho)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
#just make a data frame with all the subjects
unique_subjects <- unique(drop_df$subject)
for (subject in unique_subjects){
drop_combined_trials_df <- data.frame()
for (trial_count in seq(1,500)){
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
drop_combined_trials_df <- rbind(drop_combined_trials_df, filtered_drop_df)
}
drop_combined_trials_df
}
# Create an empty dataframe to store the results
drop_combined_trials_df <- data.frame()
# Loop over unique subjects
for (subject in unique_subjects) {
subject_drop_df <- data.frame() # Create an empty dataframe for the current subject
# Iterate through each trial count
for (trial_count in seq(1, 500)) {
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
subject_drop_df <- rbind(subject_drop_df, filtered_drop_df)
}
# Append the subject dataframe to the combined dataframe
drop_combined_trials_df <- rbind(drop_combined_trials_df, subject_drop_df)
}
# View the resulting combined dataframe
drop_combined_trials_df
View(drop_combined_trials_df)
library(tidyverse)
library(psycho)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# Function to create combined data frame for a given subject
create_combined_df <- function(subject) {
subject_drop_df <- data.frame() # Create an empty dataframe for the current subject
# Iterate through each trial count
for (trial_count in seq(1, 500)) {
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
subject_drop_df <- rbind(subject_drop_df, filtered_drop_df)
}
return(subject_drop_df)
}
# Create an empty dataframe to store the results
drop_combined_trials_df <- data.frame()
# Loop over unique subjects
for (subject in unique_subjects) {
subject_drop_df <- create_combined_df(subject)
drop_combined_trials_df <- rbind(drop_combined_trials_df, subject_drop_df)
}
# View the resulting combined dataframe
drop_combined_trials_df
# Create an empty dataframe to store the results
drop_combined_trials_df <- data.frame()
# Loop over unique subjects
for (subject in unique_subjects) {
subject_drop_df <- data.frame() # Create an empty dataframe for the current subject
# Get unique trialCount values for the current subject
unique_trialCounts <- unique(drop_df$trialCount[drop_df$subject == subject])
# Iterate through unique trialCount values
for (trial_count in unique_trialCounts) {
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
subject_drop_df <- rbind(subject_drop_df, filtered_drop_df)
}
# Append the subject dataframe to the combined dataframe
drop_combined_trials_df <- rbind(drop_combined_trials_df, subject_drop_df)
}
# View the resulting combined dataframe
drop_combined_trials_df
library(tidyverse)
library(psycho)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# Create an empty dataframe to store the results
drop_combined_trials_df <- data.frame()
# Loop over unique subjects
for (subject in unique(drop_df$subject)) {
subject_drop_df <- data.frame() # Create an empty dataframe for the current subject
# Loop over unique trialCount values for the current subject
for (trial_count in unique(drop_df$trialCount[drop_df$subject == subject])) {
filtered_drop_df <- drop_df %>%
filter(subject == subject, trialCount == trial_count, trialAttempt == 1) %>%
slice(1)
subject_drop_df <- rbind(subject_drop_df, filtered_drop_df)
}
# Append the subject dataframe to the combined dataframe
drop_combined_trials_df <- rbind(drop_combined_trials_df, subject_drop_df)
}
# View the resulting combined dataframe
drop_combined_trials_df
####
# Group by subject and trialCount, and filter for trialAttempt == 1
drop_combined_trials_df <- drop_df %>%
group_by(subject, trialCount) %>%
filter(trialAttempt == 1) %>%
slice(1) %>%
ungroup()
# View the resulting combined dataframe
drop_combined_trials_df
library(tidyverse)
library(psycho)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# group by subject and trial count, filter for trialAttempt == 1 and grab the first row
drop_combined_trials_df <- drop_df %>%
group_by(subject, trialCount) %>%
filter(trialAttempt == 1) %>%
slice(1) %>%
ungroup()
drop_combined_trials_df
# Calculate the percentages
percentage_df <- drop_combined_trials_df %>%
group_by(subject) %>%
summarize(
percentage_threat = sum(dragThreat == "threat") / n() * 100,
percentage_neutral = sum(dragThreat == "neutral") / n() * 100
)
# View the resulting percentage dataframe
percentage_df
#classify anxiety levels based on STAI sum
df_pilot1_STAI <- df_pilot1 %>%
group_by(subjectID) %>%
mutate(anxiety_level = case_when(
sumVals < 37 ~ 'low trait anxiety',
sumVals >= 38 & sumVals < 44 ~ 'moderate trait anxiety',
sumVals > 44 ~ 'high trait anxiety'
))
df_pilot1_STAI
#set-up
setwd("~/Documents/GitHub/anxiety_cognitive_maps_analyses")
library(tidyverse)
library(dplyr)
#BE SURE TO EDIT PATH NAMES EACH TIME YOU RUN SCRIPT
#path references
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/STAIscores.csv' #EDIT PATH NAME EACH TIME
#load data
df_pilot1 <- read_csv(data_path)
#manipulate df to get it to look how you want
colnames(df_pilot1) <- c('not_included', 'subjectID', paste0('s', 1:20))
num_rows = nrow(df_pilot1)
num_rows
df_pilot1 <- df_pilot1 %>%
slice(2:num_rows) %>%
select('subjectID', 's1', 's2', 's3', 's4', 's5', 's6', 's7', 's8', 's9', 's10', 's11', 's12', 's13', 's14', 's15', 's16', 's17', 's18', 's19', 's20')
#getting scores into numeric form so you can add them together later
print(sapply(df_pilot1, class)) #debugging
df_pilot1 <- transform(df_pilot1,s1 = as.numeric(s1))
print(sapply(df_pilot1$s1, class)) #debugging
df_pilot1 <- df_pilot1 %>%
mutate(across(paste0('s', 1:20), as.numeric))
#changing non-responses (5) into NaN
df_pilot1 <- df_pilot1 %>%
mutate(across(paste0('s', 1:20), ~ case_when(. == 5 ~ 0,
TRUE ~ .)))
#reverse score what needs to be reverse scored
df_pilot1 <- df_pilot1 %>%
group_by(subjectID) %>%
mutate(s1 = ifelse(s1== 0, 0, 5 - s1),
s3 = ifelse(s3== 0, 0, 5 - s3),
s6 = ifelse(s6== 0, 0, 5 - s6),
s7 = ifelse(s7== 0, 0, 5 - s7),
s10 = ifelse(s10== 0, 0, 5 - s10),
s13 = ifelse(s13== 0, 0, 5 - s13),
s14 = ifelse(s14== 0, 0, 5 - s14),
s16 = ifelse(s16== 0, 0, 5 - s16),
s19 = ifelse(s19== 0, 0, 5 - s19))
#get the mean & replace NaNs(0s) w the mean
df_pilot1 <- df_pilot1 %>%
mutate(meanVals = (s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16 + s17 + s18 + s19 + s20)/ 20) %>%
mutate(across(paste0('s', 1:20), ~ case_when(. == 0 ~ meanVals,
TRUE ~ .)))
#sum STAI score
df_pilot1 <- df_pilot1 %>%
group_by(subjectID) %>%
mutate(sumVals = s1 + s2 + s3 + s4 + s5 + s6 + s7 + s8 + s9 + s10 + s11 + s12 + s13 + s14 + s15 + s16 + s17 + s18 + s19 + s20)
#classify anxiety levels based on STAI sum
df_pilot1_STAI <- df_pilot1 %>%
group_by(subjectID) %>%
mutate(anxiety_level = case_when(
sumVals < 37 ~ 'low trait anxiety',
sumVals >= 38 & sumVals < 44 ~ 'moderate trait anxiety',
sumVals > 44 ~ 'high trait anxiety'
))
df_pilot1_STAI
View(df_pilot1_STAI)
# calculate percentage of threat being first vs. neutral being first drag out of all the trials for each subject
percentage_drop_threat_df <- drop_combined_trials_df %>%
group_by(subject) %>%
summarize(
percentage_threat = sum(dragThreat == "threat") / n() * 100,
percentage_neutral = sum(dragThreat == "neutral") / n() * 100
)
percentage_drop_threat_df
View(percentage_drop_threat_df)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
percentage_drop_threat_df
percentage_drop_threat_df
# Pivot the data frame to create the desired structure
new_df <- percentage_df %>%
pivot_longer(cols = starts_with("percentage_"),
names_to = "threat_status",
values_to = "percentage") %>%
mutate(threat_status = gsub("percentage_", "", threat_status))
# View the resulting data frame
new_df
percentage_drop_threat_df
#manipulate structure of data frame
percentage_drop_plot_df <- percentage_drop_threat_df %>%
pivot_longer(cols = starts_with("percentage_"),
names_to = "threat_status",
values_to = "percentage") %>%
mutate(threat_status = gsub("percentage_", "", threat_status))
percentage_drop_plot_df
ggplot(data = percentage_drop_plot_df, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1)
ggplot(data = percentage_drop_plot_df, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
geom_hline(yintercept = 40, linetype = "dotted", color = "red")
#change labels at some point to reflect that here, "threat_status" refers to which type of image the participant selected first to drag & drop, and "percentage" refers to the percent, for each subject, that out of how many trials it took them to complete the task, on the first attempt the first image they chose to drag & drop was a threat versus a neutral image
ggplot(data = percentage_drop_plot_df, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red")
#change labels at some point to reflect that here, "threat_status" refers to which type of image the participant selected first to drag & drop, and "percentage" refers to the percent, for each subject, that out of how many trials it took them to complete the task, on the first attempt the first image they chose to drag & drop was a threat versus a neutral image
ggplot(data = percentage_drop_plot_df, mapping = aes(x = threat_status, y = percentage, fill = threat_status)) +
geom_boxplot(alpha = 0.5) +
geom_jitter(width=0.1) +
geom_hline(yintercept = 40, linetype = "dotted", color = "blue") +
geom_hline(yintercept = 60, linetype = "dotted", color = "red")
#change labels at some point to reflect that here, "threat_status" refers to which type of image the participant selected first to drag & drop, and "percentage" refers to the percent, for each subject, that out of how many trials it took them to complete the task, on the first attempt the first image they chose to drag & drop was a threat versus a neutral image
#added the dotted lines here to indicate percent if it was by chance - so 60% for neutral (red dotted line), 40% for threat (blue dotted line)
# group by subject and trial count, filter for trialAttempt == 1 and grab the first row
drop_combined_trials_df <- drop_df %>%
group_by(subject, trialCount) %>%
filter(trialAttempt == 1) %>%
slice(1) %>%
ungroup()
drop_combined_trials_df
#ACCURACY INCLUDED
accuracy_df <- percentage_drop_plot_df %>%
group_by(subject) %>%
summarize(percentage_neutral = sum(percentage[threat_status == "neutral"]),
percentage_threat = sum(percentage[threat_status == "threat"]),
accuracy_neutral = sum(percentage[threat_status == "neutral" & dragAcc == 1]) / sum(percentage[threat_status == "neutral"]) * 100,
accuracy_threat = sum(percentage[threat_status == "threat" & dragAcc == 1]) / sum(percentage[threat_status == "threat"]) * 100)
accuracy_df
library(tidyverse)
library(psycho)
#path reference
data_path <- '/Users/brookesevchik/Box/Data/Anxiety_Cognitive_Maps/Pilot1/combinedData_Anxiety_Cognitive_Maps.csv'
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# group by subject and trial count, filter for trialAttempt == 1 and grab the first row
drop_combined_trials_df <- drop_df %>%
group_by(subject, trialCount) %>%
filter(trialAttempt == 1) %>%
slice(1) %>%
ungroup()
drop_combined_trials_df
# calculate percentage of threat being first vs. neutral being first drag out of all the trials for each subject
percentage_drop_threat_df <- drop_combined_trials_df %>%
group_by(subject) %>%
summarize(
percentage_threat = sum(dragThreat == "threat") / n() * 100,
percentage_neutral = sum(dragThreat == "neutral") / n() * 100
)
percentage_drop_threat_df
#ACCURACY INCLUDED
accuracy_df <- percentage_drop_plot_df %>%
group_by(subject) %>%
summarize(percentage_neutral = sum(percentage[threat_status == "neutral"]),
percentage_threat = sum(percentage[threat_status == "threat"]),
accuracy_neutral = sum(percentage[threat_status == "neutral" & dragAcc == 1]) / sum(percentage[threat_status == "neutral"]) * 100,
accuracy_threat = sum(percentage[threat_status == "threat" & dragAcc == 1]) / sum(percentage[threat_status == "threat"]) * 100)
accuracy_df
#ACCURACY INCLUDED
accuracy_df <- percentage_drop_threat_df %>%
group_by(subject) %>%
summarize(percentage_neutral = sum(percentage[threat_status == "neutral"]),
percentage_threat = sum(percentage[threat_status == "threat"]),
accuracy_neutral = sum(percentage[threat_status == "neutral" & dragAcc == 1]) / sum(percentage[threat_status == "neutral"]) * 100,
accuracy_threat = sum(percentage[threat_status == "threat" & dragAcc == 1]) / sum(percentage[threat_status == "threat"]) * 100)
accuracy_df
# calculate percentage of threat being first vs. neutral being first drag out of all the trials for each subject
percentage_drop_threat_df <- drop_combined_trials_df %>%
group_by(subject) %>%
summarize(
percentage_threat = sum(dragThreat == "threat") / n() * 100,
percentage_neutral = sum(dragThreat == "neutral") / n() * 100
)
percentage_drop_threat_df
#load data
df <- read_csv(data_path)
drop_df <- df %>%
filter(sectionType == 'dragTaskDropEvent') %>%
select(subject, trialCount, trialAttempt, dragThreat, dragAcc)
drop_df
# group by subject and trial count, filter for trialAttempt == 1 and grab the first row
drop_combined_trials_df <- drop_df %>%
group_by(subject, trialCount) %>%
filter(trialAttempt == 1) %>%
slice(1) %>%
ungroup()
drop_combined_trials_df
#ACCURACY INCLUDED
accuracy_df <- drop_combined_trials_df %>%
group_by(subject) %>%
summarize(percentage_neutral = sum(percentage[threat_status == "neutral"]),
percentage_threat = sum(percentage[threat_status == "threat"]),
accuracy_neutral = sum(percentage[threat_status == "neutral" & dragAcc == 1]) / sum(percentage[threat_status == "neutral"]) * 100,
accuracy_threat = sum(percentage[threat_status == "threat" & dragAcc == 1]) / sum(percentage[threat_status == "threat"]) * 100)
accuracy_df
# calculate percentage of threat being first vs. neutral being first drag out of all the trials for each subject
percentage_drop_threat_df <- drop_combined_trials_df %>%
group_by(subject) %>%
summarize(
percentage_threat = sum(dragThreat == "threat") / n() * 100,
percentage_neutral = sum(dragThreat == "neutral") / n() * 100
)
percentage_drop_threat_df
# group by subject and trial count, filter for trialAttempt == 1 and grab the first row
drop_combined_trials_df <- drop_df %>%
group_by(subject, trialCount) %>%
filter(trialAttempt == 1) %>%
slice(1) %>%
ungroup()
drop_combined_trials_df
